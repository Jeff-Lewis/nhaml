using System;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NHaml.Samples.MonoRail.Models
{
    [Database( Name = "northwind" )]
    public partial class NorthwindDataContext : DataContext
    {
        private static readonly MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void InsertCategory( Category instance );
        partial void UpdateCategory( Category instance );
        partial void DeleteCategory( Category instance );
        partial void InsertCustomer( Customer instance );
        partial void UpdateCustomer( Customer instance );
        partial void DeleteCustomer( Customer instance );
        partial void InsertEmployee( Employee instance );
        partial void UpdateEmployee( Employee instance );
        partial void DeleteEmployee( Employee instance );
        partial void InsertOrderDetail( OrderDetail instance );
        partial void UpdateOrderDetail( OrderDetail instance );
        partial void DeleteOrderDetail( OrderDetail instance );
        partial void InsertOrder( Order instance );
        partial void UpdateOrder( Order instance );
        partial void DeleteOrder( Order instance );
        partial void InsertProduct( Product instance );
        partial void UpdateProduct( Product instance );
        partial void DeleteProduct( Product instance );
        partial void InsertShipper( Shipper instance );
        partial void UpdateShipper( Shipper instance );
        partial void DeleteShipper( Shipper instance );
        partial void InsertSupplier( Supplier instance );
        partial void UpdateSupplier( Supplier instance );
        partial void DeleteSupplier( Supplier instance );

        #endregion

        public NorthwindDataContext( string connection )
            :
              base( connection, mappingSource )
        {
            OnCreated();
        }

        public NorthwindDataContext( IDbConnection connection )
            :
              base( connection, mappingSource )
        {
            OnCreated();
        }

        public NorthwindDataContext( string connection, MappingSource mappingSource )
            :
              base( connection, mappingSource )
        {
            OnCreated();
        }

        public NorthwindDataContext( IDbConnection connection, MappingSource mappingSource )
            :
              base( connection, mappingSource )
        {
            OnCreated();
        }

        public Table<Category> Categories
        {
            get { return GetTable<Category>(); }
        }

        public Table<Customer> Customers
        {
            get { return GetTable<Customer>(); }
        }

        public Table<Employee> Employees
        {
            get { return GetTable<Employee>(); }
        }

        public Table<OrderDetail> OrderDetails
        {
            get { return GetTable<OrderDetail>(); }
        }

        public Table<Order> Orders
        {
            get { return GetTable<Order>(); }
        }

        public Table<Product> Products
        {
            get { return GetTable<Product>(); }
        }

        public Table<Shipper> Shippers
        {
            get { return GetTable<Shipper>(); }
        }

        public Table<Supplier> Suppliers
        {
            get { return GetTable<Supplier>(); }
        }
    }

    [Table( Name = "Categories" )]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs( String.Empty );

        private int _CategoryID;

        private string _CategoryName;

        private string _Description;

        private Binary _Picture;

        private readonly EntitySet<Product> _Products;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate( ChangeAction action );
        partial void OnCreated();
        partial void OnCategoryIDChanging( int value );
        partial void OnCategoryIDChanged();
        partial void OnCategoryNameChanging( string value );
        partial void OnCategoryNameChanged();
        partial void OnDescriptionChanging( string value );
        partial void OnDescriptionChanged();
        partial void OnPictureChanging( Binary value );
        partial void OnPictureChanged();

        #endregion

        public Category()
        {
            _Products = new EntitySet<Product>( attach_Products, detach_Products );
            OnCreated();
        }

        [Column( Name = "Category ID", Storage = "_CategoryID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY",
          IsPrimaryKey = true, IsDbGenerated = true )]
        public int CategoryID
        {
            get { return _CategoryID; }
            set
            {
                if( (_CategoryID != value) )
                {
                    OnCategoryIDChanging( value );
                    SendPropertyChanging();
                    _CategoryID = value;
                    SendPropertyChanged( "CategoryID" );
                    OnCategoryIDChanged();
                }
            }
        }

        [Column( Name = "Category Name", Storage = "_CategoryName", DbType = "NVarChar(15) NOT NULL", CanBeNull = false )]
        public string CategoryName
        {
            get { return _CategoryName; }
            set
            {
                if( (_CategoryName != value) )
                {
                    OnCategoryNameChanging( value );
                    SendPropertyChanging();
                    _CategoryName = value;
                    SendPropertyChanged( "CategoryName" );
                    OnCategoryNameChanged();
                }
            }
        }

        [Column( Storage = "_Description", DbType = "NText", UpdateCheck = UpdateCheck.Never )]
        public string Description
        {
            get { return _Description; }
            set
            {
                if( (_Description != value) )
                {
                    OnDescriptionChanging( value );
                    SendPropertyChanging();
                    _Description = value;
                    SendPropertyChanged( "Description" );
                    OnDescriptionChanged();
                }
            }
        }

        [Column( Storage = "_Picture", DbType = "Image", CanBeNull = true, UpdateCheck = UpdateCheck.Never )]
        public Binary Picture
        {
            get { return _Picture; }
            set
            {
                if( (_Picture != value) )
                {
                    OnPictureChanging( value );
                    SendPropertyChanging();
                    _Picture = value;
                    SendPropertyChanged( "Picture" );
                    OnPictureChanged();
                }
            }
        }

        [Association( Name = "Products_FK01", Storage = "_Products", ThisKey = "CategoryID", OtherKey = "CategoryID", DeleteRule = "NO ACTION" )]
        public EntitySet<Product> Products
        {
            get { return _Products; }
            set { _Products.Assign( value ); }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if( (PropertyChanging != null) )
            {
                PropertyChanging( this, emptyChangingEventArgs );
            }
        }

        protected virtual void SendPropertyChanged( String propertyName )
        {
            if( (PropertyChanged != null) )
            {
                PropertyChanged( this, new PropertyChangedEventArgs( propertyName ) );
            }
        }

        private void attach_Products( Product entity )
        {
            SendPropertyChanging();
            entity.Category = this;
        }

        private void detach_Products( Product entity )
        {
            SendPropertyChanging();
            entity.Category = null;
        }
    }

    [Table( Name = "Customers" )]
    public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs( String.Empty );

        private string _CustomerID;

        private string _CompanyName;

        private string _ContactName;

        private string _ContactTitle;

        private string _Address;

        private string _City;

        private string _Region;

        private string _PostalCode;

        private string _Country;

        private string _Phone;

        private string _Fax;

        private readonly EntitySet<Order> _Orders;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate( ChangeAction action );
        partial void OnCreated();
        partial void OnCustomerIDChanging( string value );
        partial void OnCustomerIDChanged();
        partial void OnCompanyNameChanging( string value );
        partial void OnCompanyNameChanged();
        partial void OnContactNameChanging( string value );
        partial void OnContactNameChanged();
        partial void OnContactTitleChanging( string value );
        partial void OnContactTitleChanged();
        partial void OnAddressChanging( string value );
        partial void OnAddressChanged();
        partial void OnCityChanging( string value );
        partial void OnCityChanged();
        partial void OnRegionChanging( string value );
        partial void OnRegionChanged();
        partial void OnPostalCodeChanging( string value );
        partial void OnPostalCodeChanged();
        partial void OnCountryChanging( string value );
        partial void OnCountryChanged();
        partial void OnPhoneChanging( string value );
        partial void OnPhoneChanged();
        partial void OnFaxChanging( string value );
        partial void OnFaxChanged();

        #endregion

        public Customer()
        {
            _Orders = new EntitySet<Order>( attach_Orders, detach_Orders );
            OnCreated();
        }

        [Column( Name = "Customer ID", Storage = "_CustomerID", DbType = "NVarChar(5) NOT NULL", CanBeNull = false, IsPrimaryKey = true )]
        public string CustomerID
        {
            get { return _CustomerID; }
            set
            {
                if( (_CustomerID != value) )
                {
                    OnCustomerIDChanging( value );
                    SendPropertyChanging();
                    _CustomerID = value;
                    SendPropertyChanged( "CustomerID" );
                    OnCustomerIDChanged();
                }
            }
        }

        [Column( Name = "Company Name", Storage = "_CompanyName", DbType = "NVarChar(40) NOT NULL", CanBeNull = false )]
        public string CompanyName
        {
            get { return _CompanyName; }
            set
            {
                if( (_CompanyName != value) )
                {
                    OnCompanyNameChanging( value );
                    SendPropertyChanging();
                    _CompanyName = value;
                    SendPropertyChanged( "CompanyName" );
                    OnCompanyNameChanged();
                }
            }
        }

        [Column( Name = "Contact Name", Storage = "_ContactName", DbType = "NVarChar(30)" )]
        public string ContactName
        {
            get { return _ContactName; }
            set
            {
                if( (_ContactName != value) )
                {
                    OnContactNameChanging( value );
                    SendPropertyChanging();
                    _ContactName = value;
                    SendPropertyChanged( "ContactName" );
                    OnContactNameChanged();
                }
            }
        }

        [Column( Name = "Contact Title", Storage = "_ContactTitle", DbType = "NVarChar(30)" )]
        public string ContactTitle
        {
            get { return _ContactTitle; }
            set
            {
                if( (_ContactTitle != value) )
                {
                    OnContactTitleChanging( value );
                    SendPropertyChanging();
                    _ContactTitle = value;
                    SendPropertyChanged( "ContactTitle" );
                    OnContactTitleChanged();
                }
            }
        }

        [Column( Storage = "_Address", DbType = "NVarChar(60)" )]
        public string Address
        {
            get { return _Address; }
            set
            {
                if( (_Address != value) )
                {
                    OnAddressChanging( value );
                    SendPropertyChanging();
                    _Address = value;
                    SendPropertyChanged( "Address" );
                    OnAddressChanged();
                }
            }
        }

        [Column( Storage = "_City", DbType = "NVarChar(15)" )]
        public string City
        {
            get { return _City; }
            set
            {
                if( (_City != value) )
                {
                    OnCityChanging( value );
                    SendPropertyChanging();
                    _City = value;
                    SendPropertyChanged( "City" );
                    OnCityChanged();
                }
            }
        }

        [Column( Storage = "_Region", DbType = "NVarChar(15)" )]
        public string Region
        {
            get { return _Region; }
            set
            {
                if( (_Region != value) )
                {
                    OnRegionChanging( value );
                    SendPropertyChanging();
                    _Region = value;
                    SendPropertyChanged( "Region" );
                    OnRegionChanged();
                }
            }
        }

        [Column( Name = "Postal Code", Storage = "_PostalCode", DbType = "NVarChar(10)" )]
        public string PostalCode
        {
            get { return _PostalCode; }
            set
            {
                if( (_PostalCode != value) )
                {
                    OnPostalCodeChanging( value );
                    SendPropertyChanging();
                    _PostalCode = value;
                    SendPropertyChanged( "PostalCode" );
                    OnPostalCodeChanged();
                }
            }
        }

        [Column( Storage = "_Country", DbType = "NVarChar(15)" )]
        public string Country
        {
            get { return _Country; }
            set
            {
                if( (_Country != value) )
                {
                    OnCountryChanging( value );
                    SendPropertyChanging();
                    _Country = value;
                    SendPropertyChanged( "Country" );
                    OnCountryChanged();
                }
            }
        }

        [Column( Storage = "_Phone", DbType = "NVarChar(24)" )]
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if( (_Phone != value) )
                {
                    OnPhoneChanging( value );
                    SendPropertyChanging();
                    _Phone = value;
                    SendPropertyChanged( "Phone" );
                    OnPhoneChanged();
                }
            }
        }

        [Column( Storage = "_Fax", DbType = "NVarChar(24)" )]
        public string Fax
        {
            get { return _Fax; }
            set
            {
                if( (_Fax != value) )
                {
                    OnFaxChanging( value );
                    SendPropertyChanging();
                    _Fax = value;
                    SendPropertyChanged( "Fax" );
                    OnFaxChanged();
                }
            }
        }

        [Association( Name = "Orders_FK00", Storage = "_Orders", ThisKey = "CustomerID", OtherKey = "CustomerID", DeleteRule = "NO ACTION" )]
        public EntitySet<Order> Orders
        {
            get { return _Orders; }
            set { _Orders.Assign( value ); }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if( (PropertyChanging != null) )
            {
                PropertyChanging( this, emptyChangingEventArgs );
            }
        }

        protected virtual void SendPropertyChanged( String propertyName )
        {
            if( (PropertyChanged != null) )
            {
                PropertyChanged( this, new PropertyChangedEventArgs( propertyName ) );
            }
        }

        private void attach_Orders( Order entity )
        {
            SendPropertyChanging();
            entity.Customer = this;
        }

        private void detach_Orders( Order entity )
        {
            SendPropertyChanging();
            entity.Customer = null;
        }
    }

    [Table( Name = "Employees" )]
    public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs( String.Empty );

        private int _EmployeeID;

        private string _LastName;

        private string _FirstName;

        private string _Title;

        private DateTime? _BirthDate;

        private DateTime? _HireDate;

        private string _Address;

        private string _City;

        private string _Region;

        private string _PostalCode;

        private string _Country;

        private string _HomePhone;

        private string _Extension;

        private Binary _Photo;

        private string _Notes;

        private int? _ReportsTo;

        private readonly EntitySet<Order> _Orders;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate( ChangeAction action );
        partial void OnCreated();
        partial void OnEmployeeIDChanging( int value );
        partial void OnEmployeeIDChanged();
        partial void OnLastNameChanging( string value );
        partial void OnLastNameChanged();
        partial void OnFirstNameChanging( string value );
        partial void OnFirstNameChanged();
        partial void OnTitleChanging( string value );
        partial void OnTitleChanged();
        partial void OnBirthDateChanging( DateTime? value );
        partial void OnBirthDateChanged();
        partial void OnHireDateChanging( DateTime? value );
        partial void OnHireDateChanged();
        partial void OnAddressChanging( string value );
        partial void OnAddressChanged();
        partial void OnCityChanging( string value );
        partial void OnCityChanged();
        partial void OnRegionChanging( string value );
        partial void OnRegionChanged();
        partial void OnPostalCodeChanging( string value );
        partial void OnPostalCodeChanged();
        partial void OnCountryChanging( string value );
        partial void OnCountryChanged();
        partial void OnHomePhoneChanging( string value );
        partial void OnHomePhoneChanged();
        partial void OnExtensionChanging( string value );
        partial void OnExtensionChanged();
        partial void OnPhotoChanging( Binary value );
        partial void OnPhotoChanged();
        partial void OnNotesChanging( string value );
        partial void OnNotesChanged();
        partial void OnReportsToChanging( int? value );
        partial void OnReportsToChanged();

        #endregion

        public Employee()
        {
            _Orders = new EntitySet<Order>( attach_Orders, detach_Orders );
            OnCreated();
        }

        [Column( Name = "Employee ID", Storage = "_EmployeeID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY",
          IsPrimaryKey = true, IsDbGenerated = true )]
        public int EmployeeID
        {
            get { return _EmployeeID; }
            set
            {
                if( (_EmployeeID != value) )
                {
                    OnEmployeeIDChanging( value );
                    SendPropertyChanging();
                    _EmployeeID = value;
                    SendPropertyChanged( "EmployeeID" );
                    OnEmployeeIDChanged();
                }
            }
        }

        [Column( Name = "Last Name", Storage = "_LastName", DbType = "NVarChar(20) NOT NULL", CanBeNull = false )]
        public string LastName
        {
            get { return _LastName; }
            set
            {
                if( (_LastName != value) )
                {
                    OnLastNameChanging( value );
                    SendPropertyChanging();
                    _LastName = value;
                    SendPropertyChanged( "LastName" );
                    OnLastNameChanged();
                }
            }
        }

        [Column( Name = "First Name", Storage = "_FirstName", DbType = "NVarChar(10) NOT NULL", CanBeNull = false )]
        public string FirstName
        {
            get { return _FirstName; }
            set
            {
                if( (_FirstName != value) )
                {
                    OnFirstNameChanging( value );
                    SendPropertyChanging();
                    _FirstName = value;
                    SendPropertyChanged( "FirstName" );
                    OnFirstNameChanged();
                }
            }
        }

        [Column( Storage = "_Title", DbType = "NVarChar(30)" )]
        public string Title
        {
            get { return _Title; }
            set
            {
                if( (_Title != value) )
                {
                    OnTitleChanging( value );
                    SendPropertyChanging();
                    _Title = value;
                    SendPropertyChanged( "Title" );
                    OnTitleChanged();
                }
            }
        }

        [Column( Name = "Birth Date", Storage = "_BirthDate", DbType = "DateTime" )]
        public DateTime? BirthDate
        {
            get { return _BirthDate; }
            set
            {
                if( (_BirthDate != value) )
                {
                    OnBirthDateChanging( value );
                    SendPropertyChanging();
                    _BirthDate = value;
                    SendPropertyChanged( "BirthDate" );
                    OnBirthDateChanged();
                }
            }
        }

        [Column( Name = "Hire Date", Storage = "_HireDate", DbType = "DateTime" )]
        public DateTime? HireDate
        {
            get { return _HireDate; }
            set
            {
                if( (_HireDate != value) )
                {
                    OnHireDateChanging( value );
                    SendPropertyChanging();
                    _HireDate = value;
                    SendPropertyChanged( "HireDate" );
                    OnHireDateChanged();
                }
            }
        }

        [Column( Storage = "_Address", DbType = "NVarChar(60)" )]
        public string Address
        {
            get { return _Address; }
            set
            {
                if( (_Address != value) )
                {
                    OnAddressChanging( value );
                    SendPropertyChanging();
                    _Address = value;
                    SendPropertyChanged( "Address" );
                    OnAddressChanged();
                }
            }
        }

        [Column( Storage = "_City", DbType = "NVarChar(15)" )]
        public string City
        {
            get { return _City; }
            set
            {
                if( (_City != value) )
                {
                    OnCityChanging( value );
                    SendPropertyChanging();
                    _City = value;
                    SendPropertyChanged( "City" );
                    OnCityChanged();
                }
            }
        }

        [Column( Storage = "_Region", DbType = "NVarChar(15)" )]
        public string Region
        {
            get { return _Region; }
            set
            {
                if( (_Region != value) )
                {
                    OnRegionChanging( value );
                    SendPropertyChanging();
                    _Region = value;
                    SendPropertyChanged( "Region" );
                    OnRegionChanged();
                }
            }
        }

        [Column( Name = "Postal Code", Storage = "_PostalCode", DbType = "NVarChar(10)" )]
        public string PostalCode
        {
            get { return _PostalCode; }
            set
            {
                if( (_PostalCode != value) )
                {
                    OnPostalCodeChanging( value );
                    SendPropertyChanging();
                    _PostalCode = value;
                    SendPropertyChanged( "PostalCode" );
                    OnPostalCodeChanged();
                }
            }
        }

        [Column( Storage = "_Country", DbType = "NVarChar(15)" )]
        public string Country
        {
            get { return _Country; }
            set
            {
                if( (_Country != value) )
                {
                    OnCountryChanging( value );
                    SendPropertyChanging();
                    _Country = value;
                    SendPropertyChanged( "Country" );
                    OnCountryChanged();
                }
            }
        }

        [Column( Name = "Home Phone", Storage = "_HomePhone", DbType = "NVarChar(24)" )]
        public string HomePhone
        {
            get { return _HomePhone; }
            set
            {
                if( (_HomePhone != value) )
                {
                    OnHomePhoneChanging( value );
                    SendPropertyChanging();
                    _HomePhone = value;
                    SendPropertyChanged( "HomePhone" );
                    OnHomePhoneChanged();
                }
            }
        }

        [Column( Storage = "_Extension", DbType = "NVarChar(4)" )]
        public string Extension
        {
            get { return _Extension; }
            set
            {
                if( (_Extension != value) )
                {
                    OnExtensionChanging( value );
                    SendPropertyChanging();
                    _Extension = value;
                    SendPropertyChanged( "Extension" );
                    OnExtensionChanged();
                }
            }
        }

        [Column( Storage = "_Photo", DbType = "Image", CanBeNull = true, UpdateCheck = UpdateCheck.Never )]
        public Binary Photo
        {
            get { return _Photo; }
            set
            {
                if( (_Photo != value) )
                {
                    OnPhotoChanging( value );
                    SendPropertyChanging();
                    _Photo = value;
                    SendPropertyChanged( "Photo" );
                    OnPhotoChanged();
                }
            }
        }

        [Column( Storage = "_Notes", DbType = "NText", UpdateCheck = UpdateCheck.Never )]
        public string Notes
        {
            get { return _Notes; }
            set
            {
                if( (_Notes != value) )
                {
                    OnNotesChanging( value );
                    SendPropertyChanging();
                    _Notes = value;
                    SendPropertyChanged( "Notes" );
                    OnNotesChanged();
                }
            }
        }

        [Column( Name = "Reports To", Storage = "_ReportsTo", DbType = "Int" )]
        public int? ReportsTo
        {
            get { return _ReportsTo; }
            set
            {
                if( (_ReportsTo != value) )
                {
                    OnReportsToChanging( value );
                    SendPropertyChanging();
                    _ReportsTo = value;
                    SendPropertyChanged( "ReportsTo" );
                    OnReportsToChanged();
                }
            }
        }

        [Association( Name = "Orders_FK02", Storage = "_Orders", ThisKey = "EmployeeID", OtherKey = "EmployeeID", DeleteRule = "NO ACTION" )]
        public EntitySet<Order> Orders
        {
            get { return _Orders; }
            set { _Orders.Assign( value ); }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if( (PropertyChanging != null) )
            {
                PropertyChanging( this, emptyChangingEventArgs );
            }
        }

        protected virtual void SendPropertyChanged( String propertyName )
        {
            if( (PropertyChanged != null) )
            {
                PropertyChanged( this, new PropertyChangedEventArgs( propertyName ) );
            }
        }

        private void attach_Orders( Order entity )
        {
            SendPropertyChanging();
            entity.Employee = this;
        }

        private void detach_Orders( Order entity )
        {
            SendPropertyChanging();
            entity.Employee = null;
        }
    }

    [Table( Name = "Order Details" )]
    public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs( String.Empty );

        private int _OrderID;

        private int _ProductID;

        private decimal _UnitPrice;

        private short _Quantity;

        private float _Discount;

        private EntityRef<Product> _Product;

        private EntityRef<Order> _Order;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate( ChangeAction action );
        partial void OnCreated();
        partial void OnOrderIDChanging( int value );
        partial void OnOrderIDChanged();
        partial void OnProductIDChanging( int value );
        partial void OnProductIDChanged();
        partial void OnUnitPriceChanging( decimal value );
        partial void OnUnitPriceChanged();
        partial void OnQuantityChanging( short value );
        partial void OnQuantityChanged();
        partial void OnDiscountChanging( float value );
        partial void OnDiscountChanged();

        #endregion

        public OrderDetail()
        {
            _Product = default( EntityRef<Product> );
            _Order = default( EntityRef<Order> );
            OnCreated();
        }

        [Column( Name = "Order ID", Storage = "_OrderID", DbType = "Int NOT NULL", IsPrimaryKey = true )]
        public int OrderID
        {
            get { return _OrderID; }
            set
            {
                if( (_OrderID != value) )
                {
                    OnOrderIDChanging( value );
                    SendPropertyChanging();
                    _OrderID = value;
                    SendPropertyChanged( "OrderID" );
                    OnOrderIDChanged();
                }
            }
        }

        [Column( Name = "Product ID", Storage = "_ProductID", DbType = "Int NOT NULL", IsPrimaryKey = true )]
        public int ProductID
        {
            get { return _ProductID; }
            set
            {
                if( (_ProductID != value) )
                {
                    OnProductIDChanging( value );
                    SendPropertyChanging();
                    _ProductID = value;
                    SendPropertyChanged( "ProductID" );
                    OnProductIDChanged();
                }
            }
        }

        [Column( Name = "Unit Price", Storage = "_UnitPrice", DbType = "Money NOT NULL" )]
        public decimal UnitPrice
        {
            get { return _UnitPrice; }
            set
            {
                if( (_UnitPrice != value) )
                {
                    OnUnitPriceChanging( value );
                    SendPropertyChanging();
                    _UnitPrice = value;
                    SendPropertyChanged( "UnitPrice" );
                    OnUnitPriceChanged();
                }
            }
        }

        [Column( Storage = "_Quantity", DbType = "SmallInt NOT NULL" )]
        public short Quantity
        {
            get { return _Quantity; }
            set
            {
                if( (_Quantity != value) )
                {
                    OnQuantityChanging( value );
                    SendPropertyChanging();
                    _Quantity = value;
                    SendPropertyChanged( "Quantity" );
                    OnQuantityChanged();
                }
            }
        }

        [Column( Storage = "_Discount", DbType = "Real NOT NULL" )]
        public float Discount
        {
            get { return _Discount; }
            set
            {
                if( (_Discount != value) )
                {
                    OnDiscountChanging( value );
                    SendPropertyChanging();
                    _Discount = value;
                    SendPropertyChanged( "Discount" );
                    OnDiscountChanged();
                }
            }
        }

        [Association( Name = "Order Details_FK00", Storage = "_Product", ThisKey = "ProductID", OtherKey = "ProductID", IsForeignKey = true )]
        public Product Product
        {
            get { return _Product.Entity; }
            set
            {
                var previousValue = _Product.Entity;
                if( ((previousValue != value)
                  || (_Product.HasLoadedOrAssignedValue == false)) )
                {
                    SendPropertyChanging();
                    if( (previousValue != null) )
                    {
                        _Product.Entity = null;
                        previousValue.OrderDetails.Remove( this );
                    }
                    _Product.Entity = value;
                    if( (value != null) )
                    {
                        value.OrderDetails.Add( this );
                        _ProductID = value.ProductID;
                    }
                    else
                    {
                        _ProductID = default( int );
                    }
                    SendPropertyChanged( "Product" );
                }
            }
        }

        [Association( Name = "Order Details_FK01", Storage = "_Order", ThisKey = "OrderID", OtherKey = "OrderID", IsForeignKey = true,
          DeleteOnNull = true )]
        public Order Order
        {
            get { return _Order.Entity; }
            set
            {
                var previousValue = _Order.Entity;
                if( ((previousValue != value)
                  || (_Order.HasLoadedOrAssignedValue == false)) )
                {
                    SendPropertyChanging();
                    if( (previousValue != null) )
                    {
                        _Order.Entity = null;
                        previousValue.OrderDetails.Remove( this );
                    }
                    _Order.Entity = value;
                    if( (value != null) )
                    {
                        value.OrderDetails.Add( this );
                        _OrderID = value.OrderID;
                    }
                    else
                    {
                        _OrderID = default( int );
                    }
                    SendPropertyChanged( "Order" );
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if( (PropertyChanging != null) )
            {
                PropertyChanging( this, emptyChangingEventArgs );
            }
        }

        protected virtual void SendPropertyChanged( String propertyName )
        {
            if( (PropertyChanged != null) )
            {
                PropertyChanged( this, new PropertyChangedEventArgs( propertyName ) );
            }
        }
    }

    [Table( Name = "Orders" )]
    public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs( String.Empty );

        private int _OrderID;

        private string _CustomerID;

        private int? _EmployeeID;

        private string _ShipName;

        private string _ShipAddress;

        private string _ShipCity;

        private string _ShipRegion;

        private string _ShipPostalCode;

        private string _ShipCountry;

        private int? _ShipVia;

        private DateTime? _OrderDate;

        private DateTime? _RequiredDate;

        private DateTime? _ShippedDate;

        private decimal? _Freight;

        private readonly EntitySet<OrderDetail> _OrderDetails;

        private EntityRef<Customer> _Customer;

        private EntityRef<Shipper> _Shipper;

        private EntityRef<Employee> _Employee;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate( ChangeAction action );
        partial void OnCreated();
        partial void OnOrderIDChanging( int value );
        partial void OnOrderIDChanged();
        partial void OnCustomerIDChanging( string value );
        partial void OnCustomerIDChanged();
        partial void OnEmployeeIDChanging( int? value );
        partial void OnEmployeeIDChanged();
        partial void OnShipNameChanging( string value );
        partial void OnShipNameChanged();
        partial void OnShipAddressChanging( string value );
        partial void OnShipAddressChanged();
        partial void OnShipCityChanging( string value );
        partial void OnShipCityChanged();
        partial void OnShipRegionChanging( string value );
        partial void OnShipRegionChanged();
        partial void OnShipPostalCodeChanging( string value );
        partial void OnShipPostalCodeChanged();
        partial void OnShipCountryChanging( string value );
        partial void OnShipCountryChanged();
        partial void OnShipViaChanging( int? value );
        partial void OnShipViaChanged();
        partial void OnOrderDateChanging( DateTime? value );
        partial void OnOrderDateChanged();
        partial void OnRequiredDateChanging( DateTime? value );
        partial void OnRequiredDateChanged();
        partial void OnShippedDateChanging( DateTime? value );
        partial void OnShippedDateChanged();
        partial void OnFreightChanging( decimal? value );
        partial void OnFreightChanged();

        #endregion

        public Order()
        {
            _OrderDetails = new EntitySet<OrderDetail>( attach_OrderDetails, detach_OrderDetails );
            _Customer = default( EntityRef<Customer> );
            _Shipper = default( EntityRef<Shipper> );
            _Employee = default( EntityRef<Employee> );
            OnCreated();
        }

        [Column( Name = "Order ID", Storage = "_OrderID", DbType = "Int NOT NULL", IsPrimaryKey = true )]
        public int OrderID
        {
            get { return _OrderID; }
            set
            {
                if( (_OrderID != value) )
                {
                    OnOrderIDChanging( value );
                    SendPropertyChanging();
                    _OrderID = value;
                    SendPropertyChanged( "OrderID" );
                    OnOrderIDChanged();
                }
            }
        }

        [Column( Name = "Customer ID", Storage = "_CustomerID", DbType = "NVarChar(5) NOT NULL", CanBeNull = false )]
        public string CustomerID
        {
            get { return _CustomerID; }
            set
            {
                if( (_CustomerID != value) )
                {
                    OnCustomerIDChanging( value );
                    SendPropertyChanging();
                    _CustomerID = value;
                    SendPropertyChanged( "CustomerID" );
                    OnCustomerIDChanged();
                }
            }
        }

        [Column( Name = "Employee ID", Storage = "_EmployeeID", DbType = "Int" )]
        public int? EmployeeID
        {
            get { return _EmployeeID; }
            set
            {
                if( (_EmployeeID != value) )
                {
                    OnEmployeeIDChanging( value );
                    SendPropertyChanging();
                    _EmployeeID = value;
                    SendPropertyChanged( "EmployeeID" );
                    OnEmployeeIDChanged();
                }
            }
        }

        [Column( Name = "Ship Name", Storage = "_ShipName", DbType = "NVarChar(40)" )]
        public string ShipName
        {
            get { return _ShipName; }
            set
            {
                if( (_ShipName != value) )
                {
                    OnShipNameChanging( value );
                    SendPropertyChanging();
                    _ShipName = value;
                    SendPropertyChanged( "ShipName" );
                    OnShipNameChanged();
                }
            }
        }

        [Column( Name = "Ship Address", Storage = "_ShipAddress", DbType = "NVarChar(60)" )]
        public string ShipAddress
        {
            get { return _ShipAddress; }
            set
            {
                if( (_ShipAddress != value) )
                {
                    OnShipAddressChanging( value );
                    SendPropertyChanging();
                    _ShipAddress = value;
                    SendPropertyChanged( "ShipAddress" );
                    OnShipAddressChanged();
                }
            }
        }

        [Column( Name = "Ship City", Storage = "_ShipCity", DbType = "NVarChar(15)" )]
        public string ShipCity
        {
            get { return _ShipCity; }
            set
            {
                if( (_ShipCity != value) )
                {
                    OnShipCityChanging( value );
                    SendPropertyChanging();
                    _ShipCity = value;
                    SendPropertyChanged( "ShipCity" );
                    OnShipCityChanged();
                }
            }
        }

        [Column( Name = "Ship Region", Storage = "_ShipRegion", DbType = "NVarChar(15)" )]
        public string ShipRegion
        {
            get { return _ShipRegion; }
            set
            {
                if( (_ShipRegion != value) )
                {
                    OnShipRegionChanging( value );
                    SendPropertyChanging();
                    _ShipRegion = value;
                    SendPropertyChanged( "ShipRegion" );
                    OnShipRegionChanged();
                }
            }
        }

        [Column( Name = "Ship Postal Code", Storage = "_ShipPostalCode", DbType = "NVarChar(10)" )]
        public string ShipPostalCode
        {
            get { return _ShipPostalCode; }
            set
            {
                if( (_ShipPostalCode != value) )
                {
                    OnShipPostalCodeChanging( value );
                    SendPropertyChanging();
                    _ShipPostalCode = value;
                    SendPropertyChanged( "ShipPostalCode" );
                    OnShipPostalCodeChanged();
                }
            }
        }

        [Column( Name = "Ship Country", Storage = "_ShipCountry", DbType = "NVarChar(15)" )]
        public string ShipCountry
        {
            get { return _ShipCountry; }
            set
            {
                if( (_ShipCountry != value) )
                {
                    OnShipCountryChanging( value );
                    SendPropertyChanging();
                    _ShipCountry = value;
                    SendPropertyChanged( "ShipCountry" );
                    OnShipCountryChanged();
                }
            }
        }

        [Column( Name = "Ship Via", Storage = "_ShipVia", DbType = "Int" )]
        public int? ShipVia
        {
            get { return _ShipVia; }
            set
            {
                if( (_ShipVia != value) )
                {
                    OnShipViaChanging( value );
                    SendPropertyChanging();
                    _ShipVia = value;
                    SendPropertyChanged( "ShipVia" );
                    OnShipViaChanged();
                }
            }
        }

        [Column( Name = "Order Date", Storage = "_OrderDate", DbType = "DateTime" )]
        public DateTime? OrderDate
        {
            get { return _OrderDate; }
            set
            {
                if( (_OrderDate != value) )
                {
                    OnOrderDateChanging( value );
                    SendPropertyChanging();
                    _OrderDate = value;
                    SendPropertyChanged( "OrderDate" );
                    OnOrderDateChanged();
                }
            }
        }

        [Column( Name = "Required Date", Storage = "_RequiredDate", DbType = "DateTime" )]
        public DateTime? RequiredDate
        {
            get { return _RequiredDate; }
            set
            {
                if( (_RequiredDate != value) )
                {
                    OnRequiredDateChanging( value );
                    SendPropertyChanging();
                    _RequiredDate = value;
                    SendPropertyChanged( "RequiredDate" );
                    OnRequiredDateChanged();
                }
            }
        }

        [Column( Name = "Shipped Date", Storage = "_ShippedDate", DbType = "DateTime" )]
        public DateTime? ShippedDate
        {
            get { return _ShippedDate; }
            set
            {
                if( (_ShippedDate != value) )
                {
                    OnShippedDateChanging( value );
                    SendPropertyChanging();
                    _ShippedDate = value;
                    SendPropertyChanged( "ShippedDate" );
                    OnShippedDateChanged();
                }
            }
        }

        [Column( Storage = "_Freight", DbType = "Money" )]
        public decimal? Freight
        {
            get { return _Freight; }
            set
            {
                if( (_Freight != value) )
                {
                    OnFreightChanging( value );
                    SendPropertyChanging();
                    _Freight = value;
                    SendPropertyChanged( "Freight" );
                    OnFreightChanged();
                }
            }
        }

        [Association( Name = "Order Details_FK01", Storage = "_OrderDetails", ThisKey = "OrderID", OtherKey = "OrderID", DeleteRule = "CASCADE" )]
        public EntitySet<OrderDetail> OrderDetails
        {
            get { return _OrderDetails; }
            set { _OrderDetails.Assign( value ); }
        }

        [Association( Name = "Orders_FK00", Storage = "_Customer", ThisKey = "CustomerID", OtherKey = "CustomerID", IsForeignKey = true )]
        public Customer Customer
        {
            get { return _Customer.Entity; }
            set
            {
                var previousValue = _Customer.Entity;
                if( ((previousValue != value)
                  || (_Customer.HasLoadedOrAssignedValue == false)) )
                {
                    SendPropertyChanging();
                    if( (previousValue != null) )
                    {
                        _Customer.Entity = null;
                        previousValue.Orders.Remove( this );
                    }
                    _Customer.Entity = value;
                    if( (value != null) )
                    {
                        value.Orders.Add( this );
                        _CustomerID = value.CustomerID;
                    }
                    else
                    {
                        _CustomerID = default( string );
                    }
                    SendPropertyChanged( "Customer" );
                }
            }
        }

        [Association( Name = "Orders_FK01", Storage = "_Shipper", ThisKey = "ShipVia", OtherKey = "ShipperID", IsForeignKey = true )]
        public Shipper Shipper
        {
            get { return _Shipper.Entity; }
            set
            {
                var previousValue = _Shipper.Entity;
                if( ((previousValue != value)
                  || (_Shipper.HasLoadedOrAssignedValue == false)) )
                {
                    SendPropertyChanging();
                    if( (previousValue != null) )
                    {
                        _Shipper.Entity = null;
                        previousValue.Orders.Remove( this );
                    }
                    _Shipper.Entity = value;
                    if( (value != null) )
                    {
                        value.Orders.Add( this );
                        _ShipVia = value.ShipperID;
                    }
                    else
                    {
                        _ShipVia = default( int? );
                    }
                    SendPropertyChanged( "Shipper" );
                }
            }
        }

        [Association( Name = "Orders_FK02", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true )]
        public Employee Employee
        {
            get { return _Employee.Entity; }
            set
            {
                var previousValue = _Employee.Entity;
                if( ((previousValue != value)
                  || (_Employee.HasLoadedOrAssignedValue == false)) )
                {
                    SendPropertyChanging();
                    if( (previousValue != null) )
                    {
                        _Employee.Entity = null;
                        previousValue.Orders.Remove( this );
                    }
                    _Employee.Entity = value;
                    if( (value != null) )
                    {
                        value.Orders.Add( this );
                        _EmployeeID = value.EmployeeID;
                    }
                    else
                    {
                        _EmployeeID = default( int? );
                    }
                    SendPropertyChanged( "Employee" );
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if( (PropertyChanging != null) )
            {
                PropertyChanging( this, emptyChangingEventArgs );
            }
        }

        protected virtual void SendPropertyChanged( String propertyName )
        {
            if( (PropertyChanged != null) )
            {
                PropertyChanged( this, new PropertyChangedEventArgs( propertyName ) );
            }
        }

        private void attach_OrderDetails( OrderDetail entity )
        {
            SendPropertyChanging();
            entity.Order = this;
        }

        private void detach_OrderDetails( OrderDetail entity )
        {
            SendPropertyChanging();
            entity.Order = null;
        }
    }

    [Table( Name = "Products" )]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs( String.Empty );

        private int _ProductID;

        private int? _SupplierID;

        private int? _CategoryID;

        private string _ProductName;

        private string _EnglishName;

        private string _QuantityPerUnit;

        private decimal? _UnitPrice;

        private short? _UnitsInStock;

        private short? _UnitsOnOrder;

        private short? _ReorderLevel;

        private bool _Discontinued;

        private readonly EntitySet<OrderDetail> _OrderDetails;

        private EntityRef<Supplier> _Supplier;

        private EntityRef<Category> _Category;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate( ChangeAction action );
        partial void OnCreated();
        partial void OnProductIDChanging( int value );
        partial void OnProductIDChanged();
        partial void OnSupplierIDChanging( int? value );
        partial void OnSupplierIDChanged();
        partial void OnCategoryIDChanging( int? value );
        partial void OnCategoryIDChanged();
        partial void OnProductNameChanging( string value );
        partial void OnProductNameChanged();
        partial void OnEnglishNameChanging( string value );
        partial void OnEnglishNameChanged();
        partial void OnQuantityPerUnitChanging( string value );
        partial void OnQuantityPerUnitChanged();
        partial void OnUnitPriceChanging( decimal? value );
        partial void OnUnitPriceChanged();
        partial void OnUnitsInStockChanging( short? value );
        partial void OnUnitsInStockChanged();
        partial void OnUnitsOnOrderChanging( short? value );
        partial void OnUnitsOnOrderChanged();
        partial void OnReorderLevelChanging( short? value );
        partial void OnReorderLevelChanged();
        partial void OnDiscontinuedChanging( bool value );
        partial void OnDiscontinuedChanged();

        #endregion

        public Product()
        {
            _OrderDetails = new EntitySet<OrderDetail>( attach_OrderDetails, detach_OrderDetails );
            _Supplier = default( EntityRef<Supplier> );
            _Category = default( EntityRef<Category> );
            OnCreated();
        }

        [Column( Name = "Product ID", Storage = "_ProductID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true
          , IsDbGenerated = true )]
        public int ProductID
        {
            get { return _ProductID; }
            set
            {
                if( (_ProductID != value) )
                {
                    OnProductIDChanging( value );
                    SendPropertyChanging();
                    _ProductID = value;
                    SendPropertyChanged( "ProductID" );
                    OnProductIDChanged();
                }
            }
        }

        [Column( Name = "Supplier ID", Storage = "_SupplierID", DbType = "Int" )]
        public int? SupplierID
        {
            get { return _SupplierID; }
            set
            {
                if( (_SupplierID != value) )
                {
                    OnSupplierIDChanging( value );
                    SendPropertyChanging();
                    _SupplierID = value;
                    SendPropertyChanged( "SupplierID" );
                    OnSupplierIDChanged();
                }
            }
        }

        [Column( Name = "Category ID", Storage = "_CategoryID", DbType = "Int" )]
        public int? CategoryID
        {
            get { return _CategoryID; }
            set
            {
                if( (_CategoryID != value) )
                {
                    OnCategoryIDChanging( value );
                    SendPropertyChanging();
                    _CategoryID = value;
                    SendPropertyChanged( "CategoryID" );
                    OnCategoryIDChanged();
                }
            }
        }

        [Column( Name = "Product Name", Storage = "_ProductName", DbType = "NVarChar(40) NOT NULL", CanBeNull = false )]
        public string ProductName
        {
            get { return _ProductName; }
            set
            {
                if( (_ProductName != value) )
                {
                    OnProductNameChanging( value );
                    SendPropertyChanging();
                    _ProductName = value;
                    SendPropertyChanged( "ProductName" );
                    OnProductNameChanged();
                }
            }
        }

        [Column( Name = "English Name", Storage = "_EnglishName", DbType = "NVarChar(40)" )]
        public string EnglishName
        {
            get { return _EnglishName; }
            set
            {
                if( (_EnglishName != value) )
                {
                    OnEnglishNameChanging( value );
                    SendPropertyChanging();
                    _EnglishName = value;
                    SendPropertyChanged( "EnglishName" );
                    OnEnglishNameChanged();
                }
            }
        }

        [Column( Name = "Quantity Per Unit", Storage = "_QuantityPerUnit", DbType = "NVarChar(20)" )]
        public string QuantityPerUnit
        {
            get { return _QuantityPerUnit; }
            set
            {
                if( (_QuantityPerUnit != value) )
                {
                    OnQuantityPerUnitChanging( value );
                    SendPropertyChanging();
                    _QuantityPerUnit = value;
                    SendPropertyChanged( "QuantityPerUnit" );
                    OnQuantityPerUnitChanged();
                }
            }
        }

        [Column( Name = "Unit Price", Storage = "_UnitPrice", DbType = "Money" )]
        public decimal? UnitPrice
        {
            get { return _UnitPrice; }
            set
            {
                if( (_UnitPrice != value) )
                {
                    OnUnitPriceChanging( value );
                    SendPropertyChanging();
                    _UnitPrice = value;
                    SendPropertyChanged( "UnitPrice" );
                    OnUnitPriceChanged();
                }
            }
        }

        [Column( Name = "Units In Stock", Storage = "_UnitsInStock", DbType = "SmallInt" )]
        public short? UnitsInStock
        {
            get { return _UnitsInStock; }
            set
            {
                if( (_UnitsInStock != value) )
                {
                    OnUnitsInStockChanging( value );
                    SendPropertyChanging();
                    _UnitsInStock = value;
                    SendPropertyChanged( "UnitsInStock" );
                    OnUnitsInStockChanged();
                }
            }
        }

        [Column( Name = "Units On Order", Storage = "_UnitsOnOrder", DbType = "SmallInt" )]
        public short? UnitsOnOrder
        {
            get { return _UnitsOnOrder; }
            set
            {
                if( (_UnitsOnOrder != value) )
                {
                    OnUnitsOnOrderChanging( value );
                    SendPropertyChanging();
                    _UnitsOnOrder = value;
                    SendPropertyChanged( "UnitsOnOrder" );
                    OnUnitsOnOrderChanged();
                }
            }
        }

        [Column( Name = "Reorder Level", Storage = "_ReorderLevel", DbType = "SmallInt" )]
        public short? ReorderLevel
        {
            get { return _ReorderLevel; }
            set
            {
                if( (_ReorderLevel != value) )
                {
                    OnReorderLevelChanging( value );
                    SendPropertyChanging();
                    _ReorderLevel = value;
                    SendPropertyChanged( "ReorderLevel" );
                    OnReorderLevelChanged();
                }
            }
        }

        [Column( Storage = "_Discontinued", DbType = "Bit NOT NULL" )]
        public bool Discontinued
        {
            get { return _Discontinued; }
            set
            {
                if( (_Discontinued != value) )
                {
                    OnDiscontinuedChanging( value );
                    SendPropertyChanging();
                    _Discontinued = value;
                    SendPropertyChanged( "Discontinued" );
                    OnDiscontinuedChanged();
                }
            }
        }

        [Association( Name = "Order Details_FK00", Storage = "_OrderDetails", ThisKey = "ProductID", OtherKey = "ProductID",
          DeleteRule = "NO ACTION" )]
        public EntitySet<OrderDetail> OrderDetails
        {
            get { return _OrderDetails; }
            set { _OrderDetails.Assign( value ); }
        }

        [Association( Name = "Products_FK00", Storage = "_Supplier", ThisKey = "SupplierID", OtherKey = "SupplierID", IsForeignKey = true )]
        public Supplier Supplier
        {
            get { return _Supplier.Entity; }
            set
            {
                var previousValue = _Supplier.Entity;
                if( ((previousValue != value)
                  || (_Supplier.HasLoadedOrAssignedValue == false)) )
                {
                    SendPropertyChanging();
                    if( (previousValue != null) )
                    {
                        _Supplier.Entity = null;
                        previousValue.Products.Remove( this );
                    }
                    _Supplier.Entity = value;
                    if( (value != null) )
                    {
                        value.Products.Add( this );
                        _SupplierID = value.SupplierID;
                    }
                    else
                    {
                        _SupplierID = default( int? );
                    }
                    SendPropertyChanged( "Supplier" );
                }
            }
        }

        [Association( Name = "Products_FK01", Storage = "_Category", ThisKey = "CategoryID", OtherKey = "CategoryID", IsForeignKey = true )]
        public Category Category
        {
            get { return _Category.Entity; }
            set
            {
                var previousValue = _Category.Entity;
                if( ((previousValue != value)
                  || (_Category.HasLoadedOrAssignedValue == false)) )
                {
                    SendPropertyChanging();
                    if( (previousValue != null) )
                    {
                        _Category.Entity = null;
                        previousValue.Products.Remove( this );
                    }
                    _Category.Entity = value;
                    if( (value != null) )
                    {
                        value.Products.Add( this );
                        _CategoryID = value.CategoryID;
                    }
                    else
                    {
                        _CategoryID = default( int? );
                    }
                    SendPropertyChanged( "Category" );
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if( (PropertyChanging != null) )
            {
                PropertyChanging( this, emptyChangingEventArgs );
            }
        }

        protected virtual void SendPropertyChanged( String propertyName )
        {
            if( (PropertyChanged != null) )
            {
                PropertyChanged( this, new PropertyChangedEventArgs( propertyName ) );
            }
        }

        private void attach_OrderDetails( OrderDetail entity )
        {
            SendPropertyChanging();
            entity.Product = this;
        }

        private void detach_OrderDetails( OrderDetail entity )
        {
            SendPropertyChanging();
            entity.Product = null;
        }
    }

    [Table( Name = "Shippers" )]
    public partial class Shipper : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs( String.Empty );

        private int _ShipperID;

        private string _CompanyName;

        private readonly EntitySet<Order> _Orders;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate( ChangeAction action );
        partial void OnCreated();
        partial void OnShipperIDChanging( int value );
        partial void OnShipperIDChanged();
        partial void OnCompanyNameChanging( string value );
        partial void OnCompanyNameChanged();

        #endregion

        public Shipper()
        {
            _Orders = new EntitySet<Order>( attach_Orders, detach_Orders );
            OnCreated();
        }

        [Column( Name = "Shipper ID", Storage = "_ShipperID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true
          , IsDbGenerated = true )]
        public int ShipperID
        {
            get { return _ShipperID; }
            set
            {
                if( (_ShipperID != value) )
                {
                    OnShipperIDChanging( value );
                    SendPropertyChanging();
                    _ShipperID = value;
                    SendPropertyChanged( "ShipperID" );
                    OnShipperIDChanged();
                }
            }
        }

        [Column( Name = "Company Name", Storage = "_CompanyName", DbType = "NVarChar(40) NOT NULL", CanBeNull = false )]
        public string CompanyName
        {
            get { return _CompanyName; }
            set
            {
                if( (_CompanyName != value) )
                {
                    OnCompanyNameChanging( value );
                    SendPropertyChanging();
                    _CompanyName = value;
                    SendPropertyChanged( "CompanyName" );
                    OnCompanyNameChanged();
                }
            }
        }

        [Association( Name = "Orders_FK01", Storage = "_Orders", ThisKey = "ShipperID", OtherKey = "ShipVia", DeleteRule = "NO ACTION" )]
        public EntitySet<Order> Orders
        {
            get { return _Orders; }
            set { _Orders.Assign( value ); }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if( (PropertyChanging != null) )
            {
                PropertyChanging( this, emptyChangingEventArgs );
            }
        }

        protected virtual void SendPropertyChanged( String propertyName )
        {
            if( (PropertyChanged != null) )
            {
                PropertyChanged( this, new PropertyChangedEventArgs( propertyName ) );
            }
        }

        private void attach_Orders( Order entity )
        {
            SendPropertyChanging();
            entity.Shipper = this;
        }

        private void detach_Orders( Order entity )
        {
            SendPropertyChanging();
            entity.Shipper = null;
        }
    }

    [Table( Name = "Suppliers" )]
    public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs( String.Empty );

        private int _SupplierID;

        private string _CompanyName;

        private string _ContactName;

        private string _ContactTitle;

        private string _Address;

        private string _City;

        private string _Region;

        private string _PostalCode;

        private string _Country;

        private string _Phone;

        private string _Fax;

        private readonly EntitySet<Product> _Products;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate( ChangeAction action );
        partial void OnCreated();
        partial void OnSupplierIDChanging( int value );
        partial void OnSupplierIDChanged();
        partial void OnCompanyNameChanging( string value );
        partial void OnCompanyNameChanged();
        partial void OnContactNameChanging( string value );
        partial void OnContactNameChanged();
        partial void OnContactTitleChanging( string value );
        partial void OnContactTitleChanged();
        partial void OnAddressChanging( string value );
        partial void OnAddressChanged();
        partial void OnCityChanging( string value );
        partial void OnCityChanged();
        partial void OnRegionChanging( string value );
        partial void OnRegionChanged();
        partial void OnPostalCodeChanging( string value );
        partial void OnPostalCodeChanged();
        partial void OnCountryChanging( string value );
        partial void OnCountryChanged();
        partial void OnPhoneChanging( string value );
        partial void OnPhoneChanged();
        partial void OnFaxChanging( string value );
        partial void OnFaxChanged();

        #endregion

        public Supplier()
        {
            _Products = new EntitySet<Product>( attach_Products, detach_Products );
            OnCreated();
        }

        [Column( Name = "Supplier ID", Storage = "_SupplierID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY",
          IsPrimaryKey = true, IsDbGenerated = true )]
        public int SupplierID
        {
            get { return _SupplierID; }
            set
            {
                if( (_SupplierID != value) )
                {
                    OnSupplierIDChanging( value );
                    SendPropertyChanging();
                    _SupplierID = value;
                    SendPropertyChanged( "SupplierID" );
                    OnSupplierIDChanged();
                }
            }
        }

        [Column( Name = "Company Name", Storage = "_CompanyName", DbType = "NVarChar(40) NOT NULL", CanBeNull = false )]
        public string CompanyName
        {
            get { return _CompanyName; }
            set
            {
                if( (_CompanyName != value) )
                {
                    OnCompanyNameChanging( value );
                    SendPropertyChanging();
                    _CompanyName = value;
                    SendPropertyChanged( "CompanyName" );
                    OnCompanyNameChanged();
                }
            }
        }

        [Column( Name = "Contact Name", Storage = "_ContactName", DbType = "NVarChar(30)" )]
        public string ContactName
        {
            get { return _ContactName; }
            set
            {
                if( (_ContactName != value) )
                {
                    OnContactNameChanging( value );
                    SendPropertyChanging();
                    _ContactName = value;
                    SendPropertyChanged( "ContactName" );
                    OnContactNameChanged();
                }
            }
        }

        [Column( Name = "Contact Title", Storage = "_ContactTitle", DbType = "NVarChar(30)" )]
        public string ContactTitle
        {
            get { return _ContactTitle; }
            set
            {
                if( (_ContactTitle != value) )
                {
                    OnContactTitleChanging( value );
                    SendPropertyChanging();
                    _ContactTitle = value;
                    SendPropertyChanged( "ContactTitle" );
                    OnContactTitleChanged();
                }
            }
        }

        [Column( Storage = "_Address", DbType = "NVarChar(60)" )]
        public string Address
        {
            get { return _Address; }
            set
            {
                if( (_Address != value) )
                {
                    OnAddressChanging( value );
                    SendPropertyChanging();
                    _Address = value;
                    SendPropertyChanged( "Address" );
                    OnAddressChanged();
                }
            }
        }

        [Column( Storage = "_City", DbType = "NVarChar(15)" )]
        public string City
        {
            get { return _City; }
            set
            {
                if( (_City != value) )
                {
                    OnCityChanging( value );
                    SendPropertyChanging();
                    _City = value;
                    SendPropertyChanged( "City" );
                    OnCityChanged();
                }
            }
        }

        [Column( Storage = "_Region", DbType = "NVarChar(15)" )]
        public string Region
        {
            get { return _Region; }
            set
            {
                if( (_Region != value) )
                {
                    OnRegionChanging( value );
                    SendPropertyChanging();
                    _Region = value;
                    SendPropertyChanged( "Region" );
                    OnRegionChanged();
                }
            }
        }

        [Column( Name = "Postal Code", Storage = "_PostalCode", DbType = "NVarChar(10)" )]
        public string PostalCode
        {
            get { return _PostalCode; }
            set
            {
                if( (_PostalCode != value) )
                {
                    OnPostalCodeChanging( value );
                    SendPropertyChanging();
                    _PostalCode = value;
                    SendPropertyChanged( "PostalCode" );
                    OnPostalCodeChanged();
                }
            }
        }

        [Column( Storage = "_Country", DbType = "NVarChar(15)" )]
        public string Country
        {
            get { return _Country; }
            set
            {
                if( (_Country != value) )
                {
                    OnCountryChanging( value );
                    SendPropertyChanging();
                    _Country = value;
                    SendPropertyChanged( "Country" );
                    OnCountryChanged();
                }
            }
        }

        [Column( Storage = "_Phone", DbType = "NVarChar(24)" )]
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if( (_Phone != value) )
                {
                    OnPhoneChanging( value );
                    SendPropertyChanging();
                    _Phone = value;
                    SendPropertyChanged( "Phone" );
                    OnPhoneChanged();
                }
            }
        }

        [Column( Storage = "_Fax", DbType = "NVarChar(24)" )]
        public string Fax
        {
            get { return _Fax; }
            set
            {
                if( (_Fax != value) )
                {
                    OnFaxChanging( value );
                    SendPropertyChanging();
                    _Fax = value;
                    SendPropertyChanged( "Fax" );
                    OnFaxChanged();
                }
            }
        }

        [Association( Name = "Products_FK00", Storage = "_Products", ThisKey = "SupplierID", OtherKey = "SupplierID", DeleteRule = "NO ACTION" )]
        public EntitySet<Product> Products
        {
            get { return _Products; }
            set { _Products.Assign( value ); }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if( (PropertyChanging != null) )
            {
                PropertyChanging( this, emptyChangingEventArgs );
            }
        }

        protected virtual void SendPropertyChanged( String propertyName )
        {
            if( (PropertyChanged != null) )
            {
                PropertyChanged( this, new PropertyChangedEventArgs( propertyName ) );
            }
        }

        private void attach_Products( Product entity )
        {
            SendPropertyChanging();
            entity.Supplier = this;
        }

        private void detach_Products( Product entity )
        {
            SendPropertyChanging();
            entity.Supplier = null;
        }
    }
}

#pragma warning restore 1591