Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Namespace Models
    <Database(Name:="northwind")> _
    Partial Public Class NorthwindDataContext
        Inherits DataContext
        Private Shared ReadOnly mappingSource As MappingSource = New AttributeMappingSource()

#Region "Extensibility Method Definitions"

        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub InsertCategory(ByVal instance As Category)
        End Sub
        Partial Private Sub UpdateCategory(ByVal instance As Category)
        End Sub
        Partial Private Sub DeleteCategory(ByVal instance As Category)
        End Sub
        Partial Private Sub InsertCustomer(ByVal instance As Customer)
        End Sub
        Partial Private Sub UpdateCustomer(ByVal instance As Customer)
        End Sub
        Partial Private Sub DeleteCustomer(ByVal instance As Customer)
        End Sub
        Partial Private Sub InsertEmployee(ByVal instance As Employee)
        End Sub
        Partial Private Sub UpdateEmployee(ByVal instance As Employee)
        End Sub
        Partial Private Sub DeleteEmployee(ByVal instance As Employee)
        End Sub
        Partial Private Sub InsertOrderDetail(ByVal instance As OrderDetail)
        End Sub
        Partial Private Sub UpdateOrderDetail(ByVal instance As OrderDetail)
        End Sub
        Partial Private Sub DeleteOrderDetail(ByVal instance As OrderDetail)
        End Sub
        Partial Private Sub InsertOrder(ByVal instance As Order)
        End Sub
        Partial Private Sub UpdateOrder(ByVal instance As Order)
        End Sub
        Partial Private Sub DeleteOrder(ByVal instance As Order)
        End Sub
        Partial Private Sub InsertProduct(ByVal instance As Product)
        End Sub
        Partial Private Sub UpdateProduct(ByVal instance As Product)
        End Sub
        Partial Private Sub DeleteProduct(ByVal instance As Product)
        End Sub
        Partial Private Sub InsertShipper(ByVal instance As Shipper)
        End Sub
        Partial Private Sub UpdateShipper(ByVal instance As Shipper)
        End Sub
        Partial Private Sub DeleteShipper(ByVal instance As Shipper)
        End Sub
        Partial Private Sub InsertSupplier(ByVal instance As Supplier)
        End Sub
        Partial Private Sub UpdateSupplier(ByVal instance As Supplier)
        End Sub
        Partial Private Sub DeleteSupplier(ByVal instance As Supplier)
        End Sub

#End Region

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As IDbConnection)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As IDbConnection, ByVal mappingSource As MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public ReadOnly Property Categories() As Table(Of Category)
            Get
                Return GetTable(Of Category)()
            End Get
        End Property

        Public ReadOnly Property Customers() As Table(Of Customer)
            Get
                Return GetTable(Of Customer)()
            End Get
        End Property

        Public ReadOnly Property Employees() As Table(Of Employee)
            Get
                Return GetTable(Of Employee)()
            End Get
        End Property

        Public ReadOnly Property OrderDetails() As Table(Of OrderDetail)
            Get
                Return GetTable(Of OrderDetail)()
            End Get
        End Property

        Public ReadOnly Property Orders() As Table(Of Order)
            Get
                Return GetTable(Of Order)()
            End Get
        End Property

        Public ReadOnly Property Products() As Table(Of Product)
            Get
                Return GetTable(Of Product)()
            End Get
        End Property

        Public ReadOnly Property Shippers() As Table(Of Shipper)
            Get
                Return GetTable(Of Shipper)()
            End Get
        End Property

        Public ReadOnly Property Suppliers() As Table(Of Supplier)
            Get
                Return GetTable(Of Supplier)()
            End Get
        End Property
    End Class

    <Table(Name:="Categories")> _
    Partial Public Class Category
        Implements INotifyPropertyChanging, INotifyPropertyChanged
        Private Shared ReadOnly emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _CategoryID As Integer

        Private _CategoryName As String

        Private _Description As String

        Private _Picture As Binary

        Private ReadOnly _Products As EntitySet(Of Product)

#Region "Extensibility Method Definitions"

        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(ByVal action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCategoryIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnCategoryIDChanged()
        End Sub
        Partial Private Sub OnCategoryNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCategoryNameChanged()
        End Sub
        Partial Private Sub OnDescriptionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnDescriptionChanged()
        End Sub
        Partial Private Sub OnPictureChanging(ByVal value As Binary)
        End Sub
        Partial Private Sub OnPictureChanged()
        End Sub

#End Region

        Public Sub New()
            _Products = New EntitySet(Of Product)(AddressOf attach_Products, AddressOf detach_Products)
            OnCreated()
        End Sub

        <Column(Name:="Category ID", Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property CategoryID() As Integer
            Get
                Return _CategoryID
            End Get
            Set(ByVal value As Integer)
                If (_CategoryID <> value) Then
                    OnCategoryIDChanging(value)
                    SendPropertyChanging()
                    _CategoryID = value
                    SendPropertyChanged("CategoryID")
                    OnCategoryIDChanged()
                End If
            End Set
        End Property

        <Column(Name:="Category Name", Storage:="_CategoryName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=False)> _
        Public Property CategoryName() As String
            Get
                Return _CategoryName
            End Get
            Set(ByVal value As String)
                If (_CategoryName <> value) Then
                    OnCategoryNameChanging(value)
                    SendPropertyChanging()
                    _CategoryName = value
                    SendPropertyChanged("CategoryName")
                    OnCategoryNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
        Public Property Description() As String
            Get
                Return _Description
            End Get
            Set(ByVal value As String)
                If (_Description <> value) Then
                    OnDescriptionChanging(value)
                    SendPropertyChanging()
                    _Description = value
                    SendPropertyChanged("Description")
                    OnDescriptionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Picture", DbType:="Image", CanBeNull:=True, UpdateCheck:=UpdateCheck.Never)> _
        Public Property Picture() As Binary
            Get
                Return _Picture
            End Get
            Set(ByVal value As Binary)
                If (_Picture <> value) Then
                    OnPictureChanging(value)
                    SendPropertyChanging()
                    _Picture = value
                    SendPropertyChanged("Picture")
                    OnPictureChanged()
                End If
            End Set
        End Property

        <Association(Name:="Products_FK01", Storage:="_Products", ThisKey:="CategoryID", OtherKey:="CategoryID", DeleteRule:="NO ACTION")> _
        Public Property Products() As EntitySet(Of Product)
            Get
                Return _Products
            End Get
            Set(ByVal value As EntitySet(Of Product))
                _Products.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (PropertyChangingEvent IsNot Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            If (PropertyChangedEvent IsNot Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Products(ByVal entity As Product)
            SendPropertyChanging()
            entity.Category = Me
        End Sub

        Private Sub detach_Products(ByVal entity As Product)
            SendPropertyChanging()
            entity.Category = Nothing
        End Sub
    End Class

    <Table(Name:="Customers")> _
    Partial Public Class Customer
        Implements INotifyPropertyChanging, INotifyPropertyChanged
        Private Shared ReadOnly emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _CustomerID As String

        Private _CompanyName As String

        Private _ContactName As String

        Private _ContactTitle As String

        Private _Address As String

        Private _City As String

        Private _Region As String

        Private _PostalCode As String

        Private _Country As String

        Private _Phone As String

        Private _Fax As String

        Private ReadOnly _Orders As EntitySet(Of Order)

#Region "Extensibility Method Definitions"

        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(ByVal action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCustomerIDChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCustomerIDChanged()
        End Sub
        Partial Private Sub OnCompanyNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCompanyNameChanged()
        End Sub
        Partial Private Sub OnContactNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactNameChanged()
        End Sub
        Partial Private Sub OnContactTitleChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactTitleChanged()
        End Sub
        Partial Private Sub OnAddressChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnAddressChanged()
        End Sub
        Partial Private Sub OnCityChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCityChanged()
        End Sub
        Partial Private Sub OnRegionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnRegionChanged()
        End Sub
        Partial Private Sub OnPostalCodeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPostalCodeChanged()
        End Sub
        Partial Private Sub OnCountryChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCountryChanged()
        End Sub
        Partial Private Sub OnPhoneChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPhoneChanged()
        End Sub
        Partial Private Sub OnFaxChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnFaxChanged()
        End Sub

#End Region

        Public Sub New()
            _Orders = New EntitySet(Of Order)(AddressOf attach_Orders, AddressOf detach_Orders)
            OnCreated()
        End Sub

        <Column(Name:="Customer ID", Storage:="_CustomerID", DbType:="NVarChar(5) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
        Public Property CustomerID() As String
            Get
                Return _CustomerID
            End Get
            Set(ByVal value As String)
                If (_CustomerID <> value) Then
                    OnCustomerIDChanging(value)
                    SendPropertyChanging()
                    _CustomerID = value
                    SendPropertyChanged("CustomerID")
                    OnCustomerIDChanged()
                End If
            End Set
        End Property

        <Column(Name:="Company Name", Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
        Public Property CompanyName() As String
            Get
                Return _CompanyName
            End Get
            Set(ByVal value As String)
                If (_CompanyName <> value) Then
                    OnCompanyNameChanging(value)
                    SendPropertyChanging()
                    _CompanyName = value
                    SendPropertyChanged("CompanyName")
                    OnCompanyNameChanged()
                End If
            End Set
        End Property

        <Column(Name:="Contact Name", Storage:="_ContactName", DbType:="NVarChar(30)")> _
        Public Property ContactName() As String
            Get
                Return _ContactName
            End Get
            Set(ByVal value As String)
                If (_ContactName <> value) Then
                    OnContactNameChanging(value)
                    SendPropertyChanging()
                    _ContactName = value
                    SendPropertyChanged("ContactName")
                    OnContactNameChanged()
                End If
            End Set
        End Property

        <Column(Name:="Contact Title", Storage:="_ContactTitle", DbType:="NVarChar(30)")> _
        Public Property ContactTitle() As String
            Get
                Return _ContactTitle
            End Get
            Set(ByVal value As String)
                If (_ContactTitle <> value) Then
                    OnContactTitleChanging(value)
                    SendPropertyChanging()
                    _ContactTitle = value
                    SendPropertyChanged("ContactTitle")
                    OnContactTitleChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Address", DbType:="NVarChar(60)")> _
        Public Property Address() As String
            Get
                Return _Address
            End Get
            Set(ByVal value As String)
                If (_Address <> value) Then
                    OnAddressChanging(value)
                    SendPropertyChanging()
                    _Address = value
                    SendPropertyChanged("Address")
                    OnAddressChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_City", DbType:="NVarChar(15)")> _
        Public Property City() As String
            Get
                Return _City
            End Get
            Set(ByVal value As String)
                If (_City <> value) Then
                    OnCityChanging(value)
                    SendPropertyChanging()
                    _City = value
                    SendPropertyChanged("City")
                    OnCityChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Region", DbType:="NVarChar(15)")> _
        Public Property Region() As String
            Get
                Return _Region
            End Get
            Set(ByVal value As String)
                If (_Region <> value) Then
                    OnRegionChanging(value)
                    SendPropertyChanging()
                    _Region = value
                    SendPropertyChanged("Region")
                    OnRegionChanged()
                End If
            End Set
        End Property

        <Column(Name:="Postal Code", Storage:="_PostalCode", DbType:="NVarChar(10)")> _
        Public Property PostalCode() As String
            Get
                Return _PostalCode
            End Get
            Set(ByVal value As String)
                If (_PostalCode <> value) Then
                    OnPostalCodeChanging(value)
                    SendPropertyChanging()
                    _PostalCode = value
                    SendPropertyChanged("PostalCode")
                    OnPostalCodeChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Country", DbType:="NVarChar(15)")> _
        Public Property Country() As String
            Get
                Return _Country
            End Get
            Set(ByVal value As String)
                If (_Country <> value) Then
                    OnCountryChanging(value)
                    SendPropertyChanging()
                    _Country = value
                    SendPropertyChanged("Country")
                    OnCountryChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Phone", DbType:="NVarChar(24)")> _
        Public Property Phone() As String
            Get
                Return _Phone
            End Get
            Set(ByVal value As String)
                If (_Phone <> value) Then
                    OnPhoneChanging(value)
                    SendPropertyChanging()
                    _Phone = value
                    SendPropertyChanged("Phone")
                    OnPhoneChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Fax", DbType:="NVarChar(24)")> _
        Public Property Fax() As String
            Get
                Return _Fax
            End Get
            Set(ByVal value As String)
                If (_Fax <> value) Then
                    OnFaxChanging(value)
                    SendPropertyChanging()
                    _Fax = value
                    SendPropertyChanged("Fax")
                    OnFaxChanged()
                End If
            End Set
        End Property

        <Association(Name:="Orders_FK00", Storage:="_Orders", ThisKey:="CustomerID", OtherKey:="CustomerID", DeleteRule:="NO ACTION")> _
        Public Property Orders() As EntitySet(Of Order)
            Get
                Return _Orders
            End Get
            Set(ByVal value As EntitySet(Of Order))
                _Orders.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (PropertyChangingEvent IsNot Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            If (PropertyChangedEvent IsNot Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Orders(ByVal entity As Order)
            SendPropertyChanging()
            entity.Customer = Me
        End Sub

        Private Sub detach_Orders(ByVal entity As Order)
            SendPropertyChanging()
            entity.Customer = Nothing
        End Sub
    End Class

    <Table(Name:="Employees")> _
    Partial Public Class Employee
        Implements INotifyPropertyChanging, INotifyPropertyChanged
        Private Shared ReadOnly emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _EmployeeID As Integer

        Private _LastName As String

        Private _FirstName As String

        Private _Title As String

        Private _BirthDate? As DateTime

        Private _HireDate? As DateTime

        Private _Address As String

        Private _City As String

        Private _Region As String

        Private _PostalCode As String

        Private _Country As String

        Private _HomePhone As String

        Private _Extension As String

        Private _Photo As Binary

        Private _Notes As String

        Private _ReportsTo? As Integer

        Private ReadOnly _Orders As EntitySet(Of Order)

#Region "Extensibility Method Definitions"

        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(ByVal action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnEmployeeIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnEmployeeIDChanged()
        End Sub
        Partial Private Sub OnLastNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnLastNameChanged()
        End Sub
        Partial Private Sub OnFirstNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnFirstNameChanged()
        End Sub
        Partial Private Sub OnTitleChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnTitleChanged()
        End Sub
        Partial Private Sub OnBirthDateChanging(ByVal value? As DateTime)
        End Sub
        Partial Private Sub OnBirthDateChanged()
        End Sub
        Partial Private Sub OnHireDateChanging(ByVal value? As DateTime)
        End Sub
        Partial Private Sub OnHireDateChanged()
        End Sub
        Partial Private Sub OnAddressChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnAddressChanged()
        End Sub
        Partial Private Sub OnCityChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCityChanged()
        End Sub
        Partial Private Sub OnRegionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnRegionChanged()
        End Sub
        Partial Private Sub OnPostalCodeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPostalCodeChanged()
        End Sub
        Partial Private Sub OnCountryChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCountryChanged()
        End Sub
        Partial Private Sub OnHomePhoneChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnHomePhoneChanged()
        End Sub
        Partial Private Sub OnExtensionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnExtensionChanged()
        End Sub
        Partial Private Sub OnPhotoChanging(ByVal value As Binary)
        End Sub
        Partial Private Sub OnPhotoChanged()
        End Sub
        Partial Private Sub OnNotesChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnNotesChanged()
        End Sub
        Partial Private Sub OnReportsToChanging(ByVal value? As Integer)
        End Sub
        Partial Private Sub OnReportsToChanged()
        End Sub

#End Region

        Public Sub New()
            _Orders = New EntitySet(Of Order)(AddressOf attach_Orders, AddressOf detach_Orders)
            OnCreated()
        End Sub

        <Column(Name:="Employee ID", Storage:="_EmployeeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property EmployeeID() As Integer
            Get
                Return _EmployeeID
            End Get
            Set(ByVal value As Integer)
                If (_EmployeeID <> value) Then
                    OnEmployeeIDChanging(value)
                    SendPropertyChanging()
                    _EmployeeID = value
                    SendPropertyChanged("EmployeeID")
                    OnEmployeeIDChanged()
                End If
            End Set
        End Property

        <Column(Name:="Last Name", Storage:="_LastName", DbType:="NVarChar(20) NOT NULL", CanBeNull:=False)> _
        Public Property LastName() As String
            Get
                Return _LastName
            End Get
            Set(ByVal value As String)
                If (_LastName <> value) Then
                    OnLastNameChanging(value)
                    SendPropertyChanging()
                    _LastName = value
                    SendPropertyChanged("LastName")
                    OnLastNameChanged()
                End If
            End Set
        End Property

        <Column(Name:="First Name", Storage:="_FirstName", DbType:="NVarChar(10) NOT NULL", CanBeNull:=False)> _
        Public Property FirstName() As String
            Get
                Return _FirstName
            End Get
            Set(ByVal value As String)
                If (_FirstName <> value) Then
                    OnFirstNameChanging(value)
                    SendPropertyChanging()
                    _FirstName = value
                    SendPropertyChanged("FirstName")
                    OnFirstNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Title", DbType:="NVarChar(30)")> _
        Public Property Title() As String
            Get
                Return _Title
            End Get
            Set(ByVal value As String)
                If (_Title <> value) Then
                    OnTitleChanging(value)
                    SendPropertyChanging()
                    _Title = value
                    SendPropertyChanged("Title")
                    OnTitleChanged()
                End If
            End Set
        End Property

        <Column(Name:="Birth Date", Storage:="_BirthDate", DbType:="DateTime")> _
        Public Property BirthDate() As DateTime?
            Get
                Return _BirthDate
            End Get
            Set(ByVal value? As DateTime)
                If (Not _BirthDate.Equals(value)) Then
                    OnBirthDateChanging(value)
                    SendPropertyChanging()
                    _BirthDate = value
                    SendPropertyChanged("BirthDate")
                    OnBirthDateChanged()
                End If
            End Set
        End Property

        <Column(Name:="Hire Date", Storage:="_HireDate", DbType:="DateTime")> _
        Public Property HireDate() As DateTime?
            Get
                Return _HireDate
            End Get
            Set(ByVal value? As DateTime)
                If (Not _HireDate.Equals(value)) Then
                    OnHireDateChanging(value)
                    SendPropertyChanging()
                    _HireDate = value
                    SendPropertyChanged("HireDate")
                    OnHireDateChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Address", DbType:="NVarChar(60)")> _
        Public Property Address() As String
            Get
                Return _Address
            End Get
            Set(ByVal value As String)
                If (_Address <> value) Then
                    OnAddressChanging(value)
                    SendPropertyChanging()
                    _Address = value
                    SendPropertyChanged("Address")
                    OnAddressChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_City", DbType:="NVarChar(15)")> _
        Public Property City() As String
            Get
                Return _City
            End Get
            Set(ByVal value As String)
                If (_City <> value) Then
                    OnCityChanging(value)
                    SendPropertyChanging()
                    _City = value
                    SendPropertyChanged("City")
                    OnCityChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Region", DbType:="NVarChar(15)")> _
        Public Property Region() As String
            Get
                Return _Region
            End Get
            Set(ByVal value As String)
                If (_Region <> value) Then
                    OnRegionChanging(value)
                    SendPropertyChanging()
                    _Region = value
                    SendPropertyChanged("Region")
                    OnRegionChanged()
                End If
            End Set
        End Property

        <Column(Name:="Postal Code", Storage:="_PostalCode", DbType:="NVarChar(10)")> _
        Public Property PostalCode() As String
            Get
                Return _PostalCode
            End Get
            Set(ByVal value As String)
                If (_PostalCode <> value) Then
                    OnPostalCodeChanging(value)
                    SendPropertyChanging()
                    _PostalCode = value
                    SendPropertyChanged("PostalCode")
                    OnPostalCodeChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Country", DbType:="NVarChar(15)")> _
        Public Property Country() As String
            Get
                Return _Country
            End Get
            Set(ByVal value As String)
                If (_Country <> value) Then
                    OnCountryChanging(value)
                    SendPropertyChanging()
                    _Country = value
                    SendPropertyChanged("Country")
                    OnCountryChanged()
                End If
            End Set
        End Property

        <Column(Name:="Home Phone", Storage:="_HomePhone", DbType:="NVarChar(24)")> _
        Public Property HomePhone() As String
            Get
                Return _HomePhone
            End Get
            Set(ByVal value As String)
                If (_HomePhone <> value) Then
                    OnHomePhoneChanging(value)
                    SendPropertyChanging()
                    _HomePhone = value
                    SendPropertyChanged("HomePhone")
                    OnHomePhoneChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Extension", DbType:="NVarChar(4)")> _
        Public Property Extension() As String
            Get
                Return _Extension
            End Get
            Set(ByVal value As String)
                If (_Extension <> value) Then
                    OnExtensionChanging(value)
                    SendPropertyChanging()
                    _Extension = value
                    SendPropertyChanged("Extension")
                    OnExtensionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Photo", DbType:="Image", CanBeNull:=True, UpdateCheck:=UpdateCheck.Never)> _
        Public Property Photo() As Binary
            Get
                Return _Photo
            End Get
            Set(ByVal value As Binary)
                If (_Photo <> value) Then
                    OnPhotoChanging(value)
                    SendPropertyChanging()
                    _Photo = value
                    SendPropertyChanged("Photo")
                    OnPhotoChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Notes", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
        Public Property Notes() As String
            Get
                Return _Notes
            End Get
            Set(ByVal value As String)
                If (_Notes <> value) Then
                    OnNotesChanging(value)
                    SendPropertyChanging()
                    _Notes = value
                    SendPropertyChanged("Notes")
                    OnNotesChanged()
                End If
            End Set
        End Property

        <Column(Name:="Reports To", Storage:="_ReportsTo", DbType:="Int")> _
        Public Property ReportsTo() As Integer?
            Get
                Return _ReportsTo
            End Get
            Set(ByVal value? As Integer)
                If (Not _ReportsTo.Equals(value)) Then
                    OnReportsToChanging(value)
                    SendPropertyChanging()
                    _ReportsTo = value
                    SendPropertyChanged("ReportsTo")
                    OnReportsToChanged()
                End If
            End Set
        End Property

        <Association(Name:="Orders_FK02", Storage:="_Orders", ThisKey:="EmployeeID", OtherKey:="EmployeeID", DeleteRule:="NO ACTION")> _
        Public Property Orders() As EntitySet(Of Order)
            Get
                Return _Orders
            End Get
            Set(ByVal value As EntitySet(Of Order))
                _Orders.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (PropertyChangingEvent IsNot Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            If (PropertyChangedEvent IsNot Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Orders(ByVal entity As Order)
            SendPropertyChanging()
            entity.Employee = Me
        End Sub

        Private Sub detach_Orders(ByVal entity As Order)
            SendPropertyChanging()
            entity.Employee = Nothing
        End Sub
    End Class

    <Table(Name:="Order Details")> _
    Partial Public Class OrderDetail
        Implements INotifyPropertyChanging, INotifyPropertyChanged
        Private Shared ReadOnly emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _OrderID As Integer

        Private _ProductID As Integer

        Private _UnitPrice As Decimal

        Private _Quantity As Short

        Private _Discount As Single

        Private _Product As EntityRef(Of Product)

        Private _Order As EntityRef(Of Order)

#Region "Extensibility Method Definitions"

        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(ByVal action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnOrderIDChanged()
        End Sub
        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnProductIDChanged()
        End Sub
        Partial Private Sub OnUnitPriceChanging(ByVal value As Decimal)
        End Sub
        Partial Private Sub OnUnitPriceChanged()
        End Sub
        Partial Private Sub OnQuantityChanging(ByVal value As Short)
        End Sub
        Partial Private Sub OnQuantityChanged()
        End Sub
        Partial Private Sub OnDiscountChanging(ByVal value As Single)
        End Sub
        Partial Private Sub OnDiscountChanged()
        End Sub

#End Region

        Public Sub New()
            _Product = Nothing
            _Order = Nothing
            OnCreated()
        End Sub

        <Column(Name:="Order ID", Storage:="_OrderID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property OrderID() As Integer
            Get
                Return _OrderID
            End Get
            Set(ByVal value As Integer)
                If (_OrderID <> value) Then
                    OnOrderIDChanging(value)
                    SendPropertyChanging()
                    _OrderID = value
                    SendPropertyChanged("OrderID")
                    OnOrderIDChanged()
                End If
            End Set
        End Property

        <Column(Name:="Product ID", Storage:="_ProductID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property ProductID() As Integer
            Get
                Return _ProductID
            End Get
            Set(ByVal value As Integer)
                If (_ProductID <> value) Then
                    OnProductIDChanging(value)
                    SendPropertyChanging()
                    _ProductID = value
                    SendPropertyChanged("ProductID")
                    OnProductIDChanged()
                End If
            End Set
        End Property

        <Column(Name:="Unit Price", Storage:="_UnitPrice", DbType:="Money NOT NULL")> _
        Public Property UnitPrice() As Decimal
            Get
                Return _UnitPrice
            End Get
            Set(ByVal value As Decimal)
                If (_UnitPrice <> value) Then
                    OnUnitPriceChanging(value)
                    SendPropertyChanging()
                    _UnitPrice = value
                    SendPropertyChanged("UnitPrice")
                    OnUnitPriceChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Quantity", DbType:="SmallInt NOT NULL")> _
        Public Property Quantity() As Short
            Get
                Return _Quantity
            End Get
            Set(ByVal value As Short)
                If (_Quantity <> value) Then
                    OnQuantityChanging(value)
                    SendPropertyChanging()
                    _Quantity = value
                    SendPropertyChanged("Quantity")
                    OnQuantityChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Discount", DbType:="Real NOT NULL")> _
        Public Property Discount() As Single
            Get
                Return _Discount
            End Get
            Set(ByVal value As Single)
                If (_Discount <> value) Then
                    OnDiscountChanging(value)
                    SendPropertyChanging()
                    _Discount = value
                    SendPropertyChanged("Discount")
                    OnDiscountChanged()
                End If
            End Set
        End Property

        <Association(Name:="Order Details_FK00", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=True)> _
        Public Property Product() As Product
            Get
                Return _Product.Entity
            End Get
            Set(ByVal value As Product)
                Dim previousValue = _Product.Entity
                If ((previousValue IsNot value) OrElse (_Product.HasLoadedOrAssignedValue = False)) Then
                    SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        _Product.Entity = Nothing
                        previousValue.OrderDetails.Remove(Me)
                    End If
                    _Product.Entity = value
                    If (value IsNot Nothing) Then
                        value.OrderDetails.Add(Me)
                        _ProductID = value.ProductID
                    Else
                        _ProductID = Nothing
                    End If
                    SendPropertyChanged("Product")
                End If
            End Set
        End Property

        <Association(Name:="Order Details_FK01", Storage:="_Order", ThisKey:="OrderID", OtherKey:="OrderID", IsForeignKey:=True, DeleteOnNull:=True)> _
        Public Property Order() As Order
            Get
                Return _Order.Entity
            End Get
            Set(ByVal value As Order)
                Dim previousValue = _Order.Entity
                If ((previousValue IsNot value) OrElse (_Order.HasLoadedOrAssignedValue = False)) Then
                    SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        _Order.Entity = Nothing
                        previousValue.OrderDetails.Remove(Me)
                    End If
                    _Order.Entity = value
                    If (value IsNot Nothing) Then
                        value.OrderDetails.Add(Me)
                        _OrderID = value.OrderID
                    Else
                        _OrderID = Nothing
                    End If
                    SendPropertyChanged("Order")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (PropertyChangingEvent IsNot Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            If (PropertyChangedEvent IsNot Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="Orders")> _
    Partial Public Class Order
        Implements INotifyPropertyChanging, INotifyPropertyChanged
        Private Shared ReadOnly emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _OrderID As Integer

        Private _CustomerID As String

        Private _EmployeeID? As Integer

        Private _ShipName As String

        Private _ShipAddress As String

        Private _ShipCity As String

        Private _ShipRegion As String

        Private _ShipPostalCode As String

        Private _ShipCountry As String

        Private _ShipVia? As Integer

        Private _OrderDate? As DateTime

        Private _RequiredDate? As DateTime

        Private _ShippedDate? As DateTime

        Private _Freight? As Decimal

        Private ReadOnly _OrderDetails As EntitySet(Of OrderDetail)

        Private _Customer As EntityRef(Of Customer)

        Private _Shipper As EntityRef(Of Shipper)

        Private _Employee As EntityRef(Of Employee)

#Region "Extensibility Method Definitions"

        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(ByVal action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnOrderIDChanged()
        End Sub
        Partial Private Sub OnCustomerIDChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCustomerIDChanged()
        End Sub
        Partial Private Sub OnEmployeeIDChanging(ByVal value? As Integer)
        End Sub
        Partial Private Sub OnEmployeeIDChanged()
        End Sub
        Partial Private Sub OnShipNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipNameChanged()
        End Sub
        Partial Private Sub OnShipAddressChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipAddressChanged()
        End Sub
        Partial Private Sub OnShipCityChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipCityChanged()
        End Sub
        Partial Private Sub OnShipRegionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipRegionChanged()
        End Sub
        Partial Private Sub OnShipPostalCodeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipPostalCodeChanged()
        End Sub
        Partial Private Sub OnShipCountryChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipCountryChanged()
        End Sub
        Partial Private Sub OnShipViaChanging(ByVal value? As Integer)
        End Sub
        Partial Private Sub OnShipViaChanged()
        End Sub
        Partial Private Sub OnOrderDateChanging(ByVal value? As DateTime)
        End Sub
        Partial Private Sub OnOrderDateChanged()
        End Sub
        Partial Private Sub OnRequiredDateChanging(ByVal value? As DateTime)
        End Sub
        Partial Private Sub OnRequiredDateChanged()
        End Sub
        Partial Private Sub OnShippedDateChanging(ByVal value? As DateTime)
        End Sub
        Partial Private Sub OnShippedDateChanged()
        End Sub
        Partial Private Sub OnFreightChanging(ByVal value? As Decimal)
        End Sub
        Partial Private Sub OnFreightChanged()
        End Sub

#End Region

        Public Sub New()
            _OrderDetails = New EntitySet(Of OrderDetail)(AddressOf attach_OrderDetails, AddressOf detach_OrderDetails)
            _Customer = Nothing
            _Shipper = Nothing
            _Employee = Nothing
            OnCreated()
        End Sub

        <Column(Name:="Order ID", Storage:="_OrderID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property OrderID() As Integer
            Get
                Return _OrderID
            End Get
            Set(ByVal value As Integer)
                If (_OrderID <> value) Then
                    OnOrderIDChanging(value)
                    SendPropertyChanging()
                    _OrderID = value
                    SendPropertyChanged("OrderID")
                    OnOrderIDChanged()
                End If
            End Set
        End Property

        <Column(Name:="Customer ID", Storage:="_CustomerID", DbType:="NVarChar(5) NOT NULL", CanBeNull:=False)> _
        Public Property CustomerID() As String
            Get
                Return _CustomerID
            End Get
            Set(ByVal value As String)
                If (_CustomerID <> value) Then
                    OnCustomerIDChanging(value)
                    SendPropertyChanging()
                    _CustomerID = value
                    SendPropertyChanged("CustomerID")
                    OnCustomerIDChanged()
                End If
            End Set
        End Property

        <Column(Name:="Employee ID", Storage:="_EmployeeID", DbType:="Int")> _
        Public Property EmployeeID() As Integer?
            Get
                Return _EmployeeID
            End Get
            Set(ByVal value? As Integer)
                If (Not _EmployeeID.Equals(value)) Then
                    OnEmployeeIDChanging(value)
                    SendPropertyChanging()
                    _EmployeeID = value
                    SendPropertyChanged("EmployeeID")
                    OnEmployeeIDChanged()
                End If
            End Set
        End Property

        <Column(Name:="Ship Name", Storage:="_ShipName", DbType:="NVarChar(40)")> _
        Public Property ShipName() As String
            Get
                Return _ShipName
            End Get
            Set(ByVal value As String)
                If (_ShipName <> value) Then
                    OnShipNameChanging(value)
                    SendPropertyChanging()
                    _ShipName = value
                    SendPropertyChanged("ShipName")
                    OnShipNameChanged()
                End If
            End Set
        End Property

        <Column(Name:="Ship Address", Storage:="_ShipAddress", DbType:="NVarChar(60)")> _
        Public Property ShipAddress() As String
            Get
                Return _ShipAddress
            End Get
            Set(ByVal value As String)
                If (_ShipAddress <> value) Then
                    OnShipAddressChanging(value)
                    SendPropertyChanging()
                    _ShipAddress = value
                    SendPropertyChanged("ShipAddress")
                    OnShipAddressChanged()
                End If
            End Set
        End Property

        <Column(Name:="Ship City", Storage:="_ShipCity", DbType:="NVarChar(15)")> _
        Public Property ShipCity() As String
            Get
                Return _ShipCity
            End Get
            Set(ByVal value As String)
                If (_ShipCity <> value) Then
                    OnShipCityChanging(value)
                    SendPropertyChanging()
                    _ShipCity = value
                    SendPropertyChanged("ShipCity")
                    OnShipCityChanged()
                End If
            End Set
        End Property

        <Column(Name:="Ship Region", Storage:="_ShipRegion", DbType:="NVarChar(15)")> _
        Public Property ShipRegion() As String
            Get
                Return _ShipRegion
            End Get
            Set(ByVal value As String)
                If (_ShipRegion <> value) Then
                    OnShipRegionChanging(value)
                    SendPropertyChanging()
                    _ShipRegion = value
                    SendPropertyChanged("ShipRegion")
                    OnShipRegionChanged()
                End If
            End Set
        End Property

        <Column(Name:="Ship Postal Code", Storage:="_ShipPostalCode", DbType:="NVarChar(10)")> _
        Public Property ShipPostalCode() As String
            Get
                Return _ShipPostalCode
            End Get
            Set(ByVal value As String)
                If (_ShipPostalCode <> value) Then
                    OnShipPostalCodeChanging(value)
                    SendPropertyChanging()
                    _ShipPostalCode = value
                    SendPropertyChanged("ShipPostalCode")
                    OnShipPostalCodeChanged()
                End If
            End Set
        End Property

        <Column(Name:="Ship Country", Storage:="_ShipCountry", DbType:="NVarChar(15)")> _
        Public Property ShipCountry() As String
            Get
                Return _ShipCountry
            End Get
            Set(ByVal value As String)
                If (_ShipCountry <> value) Then
                    OnShipCountryChanging(value)
                    SendPropertyChanging()
                    _ShipCountry = value
                    SendPropertyChanged("ShipCountry")
                    OnShipCountryChanged()
                End If
            End Set
        End Property

        <Column(Name:="Ship Via", Storage:="_ShipVia", DbType:="Int")> _
        Public Property ShipVia() As Integer?
            Get
                Return _ShipVia
            End Get
            Set(ByVal value? As Integer)
                If (Not _ShipVia.Equals(value)) Then
                    OnShipViaChanging(value)
                    SendPropertyChanging()
                    _ShipVia = value
                    SendPropertyChanged("ShipVia")
                    OnShipViaChanged()
                End If
            End Set
        End Property

        <Column(Name:="Order Date", Storage:="_OrderDate", DbType:="DateTime")> _
        Public Property OrderDate() As DateTime?
            Get
                Return _OrderDate
            End Get
            Set(ByVal value? As DateTime)
                If (Not _OrderDate.Equals(value)) Then
                    OnOrderDateChanging(value)
                    SendPropertyChanging()
                    _OrderDate = value
                    SendPropertyChanged("OrderDate")
                    OnOrderDateChanged()
                End If
            End Set
        End Property

        <Column(Name:="Required Date", Storage:="_RequiredDate", DbType:="DateTime")> _
        Public Property RequiredDate() As DateTime?
            Get
                Return _RequiredDate
            End Get
            Set(ByVal value? As DateTime)
                If (Not _RequiredDate.Equals(value)) Then
                    OnRequiredDateChanging(value)
                    SendPropertyChanging()
                    _RequiredDate = value
                    SendPropertyChanged("RequiredDate")
                    OnRequiredDateChanged()
                End If
            End Set
        End Property

        <Column(Name:="Shipped Date", Storage:="_ShippedDate", DbType:="DateTime")> _
        Public Property ShippedDate() As DateTime?
            Get
                Return _ShippedDate
            End Get
            Set(ByVal value? As DateTime)
                If (Not _ShippedDate.Equals(value)) Then
                    OnShippedDateChanging(value)
                    SendPropertyChanging()
                    _ShippedDate = value
                    SendPropertyChanged("ShippedDate")
                    OnShippedDateChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Freight", DbType:="Money")> _
        Public Property Freight() As Decimal?
            Get
                Return _Freight
            End Get
            Set(ByVal value? As Decimal)
                If (Not _Freight.Equals(value)) Then
                    OnFreightChanging(value)
                    SendPropertyChanging()
                    _Freight = value
                    SendPropertyChanged("Freight")
                    OnFreightChanged()
                End If
            End Set
        End Property

        <Association(Name:="Order Details_FK01", Storage:="_OrderDetails", ThisKey:="OrderID", OtherKey:="OrderID", DeleteRule:="CASCADE")> _
        Public Property OrderDetails() As EntitySet(Of OrderDetail)
            Get
                Return _OrderDetails
            End Get
            Set(ByVal value As EntitySet(Of OrderDetail))
                _OrderDetails.Assign(value)
            End Set
        End Property

        <Association(Name:="Orders_FK00", Storage:="_Customer", ThisKey:="CustomerID", OtherKey:="CustomerID", IsForeignKey:=True)> _
        Public Property Customer() As Customer
            Get
                Return _Customer.Entity
            End Get
            Set(ByVal value As Customer)
                Dim previousValue = _Customer.Entity
                If ((previousValue IsNot value) OrElse (_Customer.HasLoadedOrAssignedValue = False)) Then
                    SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        _Customer.Entity = Nothing
                        previousValue.Orders.Remove(Me)
                    End If
                    _Customer.Entity = value
                    If (value IsNot Nothing) Then
                        value.Orders.Add(Me)
                        _CustomerID = value.CustomerID
                    Else
                        _CustomerID = Nothing
                    End If
                    SendPropertyChanged("Customer")
                End If
            End Set
        End Property

        <Association(Name:="Orders_FK01", Storage:="_Shipper", ThisKey:="ShipVia", OtherKey:="ShipperID", IsForeignKey:=True)> _
        Public Property Shipper() As Shipper
            Get
                Return _Shipper.Entity
            End Get
            Set(ByVal value As Shipper)
                Dim previousValue = _Shipper.Entity
                If ((previousValue IsNot value) OrElse (_Shipper.HasLoadedOrAssignedValue = False)) Then
                    SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        _Shipper.Entity = Nothing
                        previousValue.Orders.Remove(Me)
                    End If
                    _Shipper.Entity = value
                    If (value IsNot Nothing) Then
                        value.Orders.Add(Me)
                        _ShipVia = value.ShipperID
                    Else
                        _ShipVia = Nothing
                    End If
                    SendPropertyChanged("Shipper")
                End If
            End Set
        End Property

        <Association(Name:="Orders_FK02", Storage:="_Employee", ThisKey:="EmployeeID", OtherKey:="EmployeeID", IsForeignKey:=True)> _
        Public Property Employee() As Employee
            Get
                Return _Employee.Entity
            End Get
            Set(ByVal value As Employee)
                Dim previousValue = _Employee.Entity
                If ((previousValue IsNot value) OrElse (_Employee.HasLoadedOrAssignedValue = False)) Then
                    SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        _Employee.Entity = Nothing
                        previousValue.Orders.Remove(Me)
                    End If
                    _Employee.Entity = value
                    If (value IsNot Nothing) Then
                        value.Orders.Add(Me)
                        _EmployeeID = value.EmployeeID
                    Else
                        _EmployeeID = Nothing
                    End If
                    SendPropertyChanged("Employee")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (PropertyChangingEvent IsNot Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            If (PropertyChangedEvent IsNot Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_OrderDetails(ByVal entity As OrderDetail)
            SendPropertyChanging()
            entity.Order = Me
        End Sub

        Private Sub detach_OrderDetails(ByVal entity As OrderDetail)
            SendPropertyChanging()
            entity.Order = Nothing
        End Sub
    End Class

    <Table(Name:="Products")> _
    Partial Public Class Product
        Implements INotifyPropertyChanging, INotifyPropertyChanged
        Private Shared ReadOnly emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ProductID As Integer

        Private _SupplierID? As Integer

        Private _CategoryID? As Integer

        Private _ProductName As String

        Private _EnglishName As String

        Private _QuantityPerUnit As String

        Private _UnitPrice? As Decimal

        Private _UnitsInStock? As Short

        Private _UnitsOnOrder? As Short

        Private _ReorderLevel? As Short

        Private _Discontinued As Boolean

        Private ReadOnly _OrderDetails As EntitySet(Of OrderDetail)

        Private _Supplier As EntityRef(Of Supplier)

        Private _Category As EntityRef(Of Category)

#Region "Extensibility Method Definitions"

        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(ByVal action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnProductIDChanged()
        End Sub
        Partial Private Sub OnSupplierIDChanging(ByVal value? As Integer)
        End Sub
        Partial Private Sub OnSupplierIDChanged()
        End Sub
        Partial Private Sub OnCategoryIDChanging(ByVal value? As Integer)
        End Sub
        Partial Private Sub OnCategoryIDChanged()
        End Sub
        Partial Private Sub OnProductNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnProductNameChanged()
        End Sub
        Partial Private Sub OnEnglishNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnEnglishNameChanged()
        End Sub
        Partial Private Sub OnQuantityPerUnitChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnQuantityPerUnitChanged()
        End Sub
        Partial Private Sub OnUnitPriceChanging(ByVal value? As Decimal)
        End Sub
        Partial Private Sub OnUnitPriceChanged()
        End Sub
        Partial Private Sub OnUnitsInStockChanging(ByVal value? As Short)
        End Sub
        Partial Private Sub OnUnitsInStockChanged()
        End Sub
        Partial Private Sub OnUnitsOnOrderChanging(ByVal value? As Short)
        End Sub
        Partial Private Sub OnUnitsOnOrderChanged()
        End Sub
        Partial Private Sub OnReorderLevelChanging(ByVal value? As Short)
        End Sub
        Partial Private Sub OnReorderLevelChanged()
        End Sub
        Partial Private Sub OnDiscontinuedChanging(ByVal value As Boolean)
        End Sub
        Partial Private Sub OnDiscontinuedChanged()
        End Sub

#End Region

        Public Sub New()
            _OrderDetails = New EntitySet(Of OrderDetail)(AddressOf attach_OrderDetails, AddressOf detach_OrderDetails)
            _Supplier = Nothing
            _Category = Nothing
            OnCreated()
        End Sub

        <Column(Name:="Product ID", Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property ProductID() As Integer
            Get
                Return _ProductID
            End Get
            Set(ByVal value As Integer)
                If (_ProductID <> value) Then
                    OnProductIDChanging(value)
                    SendPropertyChanging()
                    _ProductID = value
                    SendPropertyChanged("ProductID")
                    OnProductIDChanged()
                End If
            End Set
        End Property

        <Column(Name:="Supplier ID", Storage:="_SupplierID", DbType:="Int")> _
        Public Property SupplierID() As Integer?
            Get
                Return _SupplierID
            End Get
            Set(ByVal value? As Integer)
                If (Not _SupplierID.Equals(value)) Then
                    OnSupplierIDChanging(value)
                    SendPropertyChanging()
                    _SupplierID = value
                    SendPropertyChanged("SupplierID")
                    OnSupplierIDChanged()
                End If
            End Set
        End Property

        <Column(Name:="Category ID", Storage:="_CategoryID", DbType:="Int")> _
        Public Property CategoryID() As Integer?
            Get
                Return _CategoryID
            End Get
            Set(ByVal value? As Integer)
                If (Not _CategoryID.Equals(value)) Then
                    OnCategoryIDChanging(value)
                    SendPropertyChanging()
                    _CategoryID = value
                    SendPropertyChanged("CategoryID")
                    OnCategoryIDChanged()
                End If
            End Set
        End Property

        <Column(Name:="Product Name", Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
        Public Property ProductName() As String
            Get
                Return _ProductName
            End Get
            Set(ByVal value As String)
                If (_ProductName <> value) Then
                    OnProductNameChanging(value)
                    SendPropertyChanging()
                    _ProductName = value
                    SendPropertyChanged("ProductName")
                    OnProductNameChanged()
                End If
            End Set
        End Property

        <Column(Name:="English Name", Storage:="_EnglishName", DbType:="NVarChar(40)")> _
        Public Property EnglishName() As String
            Get
                Return _EnglishName
            End Get
            Set(ByVal value As String)
                If (_EnglishName <> value) Then
                    OnEnglishNameChanging(value)
                    SendPropertyChanging()
                    _EnglishName = value
                    SendPropertyChanged("EnglishName")
                    OnEnglishNameChanged()
                End If
            End Set
        End Property

        <Column(Name:="Quantity Per Unit", Storage:="_QuantityPerUnit", DbType:="NVarChar(20)")> _
        Public Property QuantityPerUnit() As String
            Get
                Return _QuantityPerUnit
            End Get
            Set(ByVal value As String)
                If (_QuantityPerUnit <> value) Then
                    OnQuantityPerUnitChanging(value)
                    SendPropertyChanging()
                    _QuantityPerUnit = value
                    SendPropertyChanged("QuantityPerUnit")
                    OnQuantityPerUnitChanged()
                End If
            End Set
        End Property

        <Column(Name:="Unit Price", Storage:="_UnitPrice", DbType:="Money")> _
        Public Property UnitPrice() As Decimal?
            Get
                Return _UnitPrice
            End Get
            Set(ByVal value? As Decimal)
                If (Not _UnitPrice.Equals(value)) Then
                    OnUnitPriceChanging(value)
                    SendPropertyChanging()
                    _UnitPrice = value
                    SendPropertyChanged("UnitPrice")
                    OnUnitPriceChanged()
                End If
            End Set
        End Property

        <Column(Name:="Units In Stock", Storage:="_UnitsInStock", DbType:="SmallInt")> _
        Public Property UnitsInStock() As Short?
            Get
                Return _UnitsInStock
            End Get
            Set(ByVal value? As Short)
                If (Not _UnitsInStock.Equals(value)) Then
                    OnUnitsInStockChanging(value)
                    SendPropertyChanging()
                    _UnitsInStock = value
                    SendPropertyChanged("UnitsInStock")
                    OnUnitsInStockChanged()
                End If
            End Set
        End Property

        <Column(Name:="Units On Order", Storage:="_UnitsOnOrder", DbType:="SmallInt")> _
        Public Property UnitsOnOrder() As Short?
            Get
                Return _UnitsOnOrder
            End Get
            Set(ByVal value? As Short)
                If (Not _UnitsOnOrder.Equals(value)) Then
                    OnUnitsOnOrderChanging(value)
                    SendPropertyChanging()
                    _UnitsOnOrder = value
                    SendPropertyChanged("UnitsOnOrder")
                    OnUnitsOnOrderChanged()
                End If
            End Set
        End Property

        <Column(Name:="Reorder Level", Storage:="_ReorderLevel", DbType:="SmallInt")> _
        Public Property ReorderLevel() As Short?
            Get
                Return _ReorderLevel
            End Get
            Set(ByVal value? As Short)
                If (Not _ReorderLevel.Equals(value)) Then
                    OnReorderLevelChanging(value)
                    SendPropertyChanging()
                    _ReorderLevel = value
                    SendPropertyChanged("ReorderLevel")
                    OnReorderLevelChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Discontinued", DbType:="Bit NOT NULL")> _
        Public Property Discontinued() As Boolean
            Get
                Return _Discontinued
            End Get
            Set(ByVal value As Boolean)
                If (_Discontinued <> value) Then
                    OnDiscontinuedChanging(value)
                    SendPropertyChanging()
                    _Discontinued = value
                    SendPropertyChanged("Discontinued")
                    OnDiscontinuedChanged()
                End If
            End Set
        End Property

        <Association(Name:="Order Details_FK00", Storage:="_OrderDetails", ThisKey:="ProductID", OtherKey:="ProductID", DeleteRule:="NO ACTION")> _
        Public Property OrderDetails() As EntitySet(Of OrderDetail)
            Get
                Return _OrderDetails
            End Get
            Set(ByVal value As EntitySet(Of OrderDetail))
                _OrderDetails.Assign(value)
            End Set
        End Property

        <Association(Name:="Products_FK00", Storage:="_Supplier", ThisKey:="SupplierID", OtherKey:="SupplierID", IsForeignKey:=True)> _
        Public Property Supplier() As Supplier
            Get
                Return _Supplier.Entity
            End Get
            Set(ByVal value As Supplier)
                Dim previousValue = _Supplier.Entity
                If ((previousValue IsNot value) OrElse (_Supplier.HasLoadedOrAssignedValue = False)) Then
                    SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        _Supplier.Entity = Nothing
                        previousValue.Products.Remove(Me)
                    End If
                    _Supplier.Entity = value
                    If (value IsNot Nothing) Then
                        value.Products.Add(Me)
                        _SupplierID = value.SupplierID
                    Else
                        _SupplierID = Nothing
                    End If
                    SendPropertyChanged("Supplier")
                End If
            End Set
        End Property

        <Association(Name:="Products_FK01", Storage:="_Category", ThisKey:="CategoryID", OtherKey:="CategoryID", IsForeignKey:=True)> _
        Public Property Category() As Category
            Get
                Return _Category.Entity
            End Get
            Set(ByVal value As Category)
                Dim previousValue = _Category.Entity
                If ((previousValue IsNot value) OrElse (_Category.HasLoadedOrAssignedValue = False)) Then
                    SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        _Category.Entity = Nothing
                        previousValue.Products.Remove(Me)
                    End If
                    _Category.Entity = value
                    If (value IsNot Nothing) Then
                        value.Products.Add(Me)
                        _CategoryID = value.CategoryID
                    Else
                        _CategoryID = Nothing
                    End If
                    SendPropertyChanged("Category")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (PropertyChangingEvent IsNot Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            If (PropertyChangedEvent IsNot Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_OrderDetails(ByVal entity As OrderDetail)
            SendPropertyChanging()
            entity.Product = Me
        End Sub

        Private Sub detach_OrderDetails(ByVal entity As OrderDetail)
            SendPropertyChanging()
            entity.Product = Nothing
        End Sub
    End Class

    <Table(Name:="Shippers")> _
    Partial Public Class Shipper
        Implements INotifyPropertyChanging, INotifyPropertyChanged
        Private Shared ReadOnly emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ShipperID As Integer

        Private _CompanyName As String

        Private ReadOnly _Orders As EntitySet(Of Order)

#Region "Extensibility Method Definitions"

        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(ByVal action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnShipperIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnShipperIDChanged()
        End Sub
        Partial Private Sub OnCompanyNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCompanyNameChanged()
        End Sub

#End Region

        Public Sub New()
            _Orders = New EntitySet(Of Order)(AddressOf attach_Orders, AddressOf detach_Orders)
            OnCreated()
        End Sub

        <Column(Name:="Shipper ID", Storage:="_ShipperID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property ShipperID() As Integer
            Get
                Return _ShipperID
            End Get
            Set(ByVal value As Integer)
                If (_ShipperID <> value) Then
                    OnShipperIDChanging(value)
                    SendPropertyChanging()
                    _ShipperID = value
                    SendPropertyChanged("ShipperID")
                    OnShipperIDChanged()
                End If
            End Set
        End Property

        <Column(Name:="Company Name", Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
        Public Property CompanyName() As String
            Get
                Return _CompanyName
            End Get
            Set(ByVal value As String)
                If (_CompanyName <> value) Then
                    OnCompanyNameChanging(value)
                    SendPropertyChanging()
                    _CompanyName = value
                    SendPropertyChanged("CompanyName")
                    OnCompanyNameChanged()
                End If
            End Set
        End Property

        <Association(Name:="Orders_FK01", Storage:="_Orders", ThisKey:="ShipperID", OtherKey:="ShipVia", DeleteRule:="NO ACTION")> _
        Public Property Orders() As EntitySet(Of Order)
            Get
                Return _Orders
            End Get
            Set(ByVal value As EntitySet(Of Order))
                _Orders.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (PropertyChangingEvent IsNot Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            If (PropertyChangedEvent IsNot Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Orders(ByVal entity As Order)
            SendPropertyChanging()
            entity.Shipper = Me
        End Sub

        Private Sub detach_Orders(ByVal entity As Order)
            SendPropertyChanging()
            entity.Shipper = Nothing
        End Sub
    End Class

    <Table(Name:="Suppliers")> _
    Partial Public Class Supplier
        Implements INotifyPropertyChanging, INotifyPropertyChanged
        Private Shared ReadOnly emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _SupplierID As Integer

        Private _CompanyName As String

        Private _ContactName As String

        Private _ContactTitle As String

        Private _Address As String

        Private _City As String

        Private _Region As String

        Private _PostalCode As String

        Private _Country As String

        Private _Phone As String

        Private _Fax As String

        Private ReadOnly _Products As EntitySet(Of Product)

#Region "Extensibility Method Definitions"

        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(ByVal action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnSupplierIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnSupplierIDChanged()
        End Sub
        Partial Private Sub OnCompanyNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCompanyNameChanged()
        End Sub
        Partial Private Sub OnContactNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactNameChanged()
        End Sub
        Partial Private Sub OnContactTitleChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactTitleChanged()
        End Sub
        Partial Private Sub OnAddressChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnAddressChanged()
        End Sub
        Partial Private Sub OnCityChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCityChanged()
        End Sub
        Partial Private Sub OnRegionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnRegionChanged()
        End Sub
        Partial Private Sub OnPostalCodeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPostalCodeChanged()
        End Sub
        Partial Private Sub OnCountryChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCountryChanged()
        End Sub
        Partial Private Sub OnPhoneChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPhoneChanged()
        End Sub
        Partial Private Sub OnFaxChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnFaxChanged()
        End Sub

#End Region

        Public Sub New()
            _Products = New EntitySet(Of Product)(AddressOf attach_Products, AddressOf detach_Products)
            OnCreated()
        End Sub

        <Column(Name:="Supplier ID", Storage:="_SupplierID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property SupplierID() As Integer
            Get
                Return _SupplierID
            End Get
            Set(ByVal value As Integer)
                If (_SupplierID <> value) Then
                    OnSupplierIDChanging(value)
                    SendPropertyChanging()
                    _SupplierID = value
                    SendPropertyChanged("SupplierID")
                    OnSupplierIDChanged()
                End If
            End Set
        End Property

        <Column(Name:="Company Name", Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
        Public Property CompanyName() As String
            Get
                Return _CompanyName
            End Get
            Set(ByVal value As String)
                If (_CompanyName <> value) Then
                    OnCompanyNameChanging(value)
                    SendPropertyChanging()
                    _CompanyName = value
                    SendPropertyChanged("CompanyName")
                    OnCompanyNameChanged()
                End If
            End Set
        End Property

        <Column(Name:="Contact Name", Storage:="_ContactName", DbType:="NVarChar(30)")> _
        Public Property ContactName() As String
            Get
                Return _ContactName
            End Get
            Set(ByVal value As String)
                If (_ContactName <> value) Then
                    OnContactNameChanging(value)
                    SendPropertyChanging()
                    _ContactName = value
                    SendPropertyChanged("ContactName")
                    OnContactNameChanged()
                End If
            End Set
        End Property

        <Column(Name:="Contact Title", Storage:="_ContactTitle", DbType:="NVarChar(30)")> _
        Public Property ContactTitle() As String
            Get
                Return _ContactTitle
            End Get
            Set(ByVal value As String)
                If (_ContactTitle <> value) Then
                    OnContactTitleChanging(value)
                    SendPropertyChanging()
                    _ContactTitle = value
                    SendPropertyChanged("ContactTitle")
                    OnContactTitleChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Address", DbType:="NVarChar(60)")> _
        Public Property Address() As String
            Get
                Return _Address
            End Get
            Set(ByVal value As String)
                If (_Address <> value) Then
                    OnAddressChanging(value)
                    SendPropertyChanging()
                    _Address = value
                    SendPropertyChanged("Address")
                    OnAddressChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_City", DbType:="NVarChar(15)")> _
        Public Property City() As String
            Get
                Return _City
            End Get
            Set(ByVal value As String)
                If (_City <> value) Then
                    OnCityChanging(value)
                    SendPropertyChanging()
                    _City = value
                    SendPropertyChanged("City")
                    OnCityChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Region", DbType:="NVarChar(15)")> _
        Public Property Region() As String
            Get
                Return _Region
            End Get
            Set(ByVal value As String)
                If (_Region <> value) Then
                    OnRegionChanging(value)
                    SendPropertyChanging()
                    _Region = value
                    SendPropertyChanged("Region")
                    OnRegionChanged()
                End If
            End Set
        End Property

        <Column(Name:="Postal Code", Storage:="_PostalCode", DbType:="NVarChar(10)")> _
        Public Property PostalCode() As String
            Get
                Return _PostalCode
            End Get
            Set(ByVal value As String)
                If (_PostalCode <> value) Then
                    OnPostalCodeChanging(value)
                    SendPropertyChanging()
                    _PostalCode = value
                    SendPropertyChanged("PostalCode")
                    OnPostalCodeChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Country", DbType:="NVarChar(15)")> _
        Public Property Country() As String
            Get
                Return _Country
            End Get
            Set(ByVal value As String)
                If (_Country <> value) Then
                    OnCountryChanging(value)
                    SendPropertyChanging()
                    _Country = value
                    SendPropertyChanged("Country")
                    OnCountryChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Phone", DbType:="NVarChar(24)")> _
        Public Property Phone() As String
            Get
                Return _Phone
            End Get
            Set(ByVal value As String)
                If (_Phone <> value) Then
                    OnPhoneChanging(value)
                    SendPropertyChanging()
                    _Phone = value
                    SendPropertyChanged("Phone")
                    OnPhoneChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Fax", DbType:="NVarChar(24)")> _
        Public Property Fax() As String
            Get
                Return _Fax
            End Get
            Set(ByVal value As String)
                If (_Fax <> value) Then
                    OnFaxChanging(value)
                    SendPropertyChanging()
                    _Fax = value
                    SendPropertyChanged("Fax")
                    OnFaxChanged()
                End If
            End Set
        End Property

        <Association(Name:="Products_FK00", Storage:="_Products", ThisKey:="SupplierID", OtherKey:="SupplierID", DeleteRule:="NO ACTION")> _
        Public Property Products() As EntitySet(Of Product)
            Get
                Return _Products
            End Get
            Set(ByVal value As EntitySet(Of Product))
                _Products.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (PropertyChangingEvent IsNot Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            If (PropertyChangedEvent IsNot Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Products(ByVal entity As Product)
            SendPropertyChanging()
            entity.Supplier = Me
        End Sub

        Private Sub detach_Products(ByVal entity As Product)
            SendPropertyChanging()
            entity.Supplier = Nothing
        End Sub
    End Class
End Namespace

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591